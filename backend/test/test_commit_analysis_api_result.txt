Status code: 200
Snapshot JSON của một số commit đầu và cuối:

--- Mẫu đầu tiên ---
{
  "id": 611,
  "sha": "6414fdcb390ecb8cce13c7973dad77b719d70dad",
  "message": "Merge branch 'implementHAN' of https://github.com/Waito3007/KLTN04 into implementHAN",
  "author_name": "Youaremyhome",
  "committer_date": "2025-07-26T01:11:14",
  "branch_name": "CommitAnalyst",
  "insertions": 2522,
  "deletions": 4,
  "files_changed": "[\"backend/api/routes/ai_status.py\", \"backend/api/routes/assignment_recommendation.py\", \"backend/main.py\", \"backend/scripts/test_commits_han.py\", \"backend/services/assignment_recommendation_service.py\", \"fix_repo_queries.py\", \"frontend/src/components/Dashboard/AssignmentRecommendation.jsx\", \"frontend/src/components/Dashboard/ProjectTaskManager.jsx\", \"frontend/src/components/Dashboard/ProjectTaskManager/AssignmentRecommendation.jsx\", \"frontend/src/components/Dashboard/ProjectTaskManager/TaskModal.jsx\", \"frontend/src/services/api.js\"]",
  "diff_content": "@@ -0,0 +1,191 @@\n+from fastapi import APIRouter, Depends, HTTPException\n+from sqlalchemy.orm import Session\n+from typing import Dict, Any\n+from db.database import get_db\n+from services.assignment_recommendation_service import AssignmentRecommendationService\n+from services.multifusion_v2_service import MultiFusionV2Service\n+from services.area_analysis_service import AreaAnalysisService\n+from services.risk_analysis_service import RiskAnalysisService\n+import logging\n+\n+logger = logging.getLogger(__name__)\n+\n+router = APIRouter(prefix=\"/api/ai-status\", tags=[\"AI Status\"])\n+\n+@router.get(\"/assignment-models\")\n+async def get_assignment_ai_models_status() -> Dict[str, Any]:\n+    \"\"\"\n+    Kiểm tra trạng thái của các AI models được sử dụng trong Assignment Recommendation\n+    \"\"\"\n+    try:\n+        # Initialize services\n+        multifusion_v2 = MultiFusionV2Service()\n+        area_service = AreaAnalysisService()\n+        risk_service = RiskAnalysisService()\n+        \n+        return {\n+            \"success\": True,\n+            \"models\": {\n+                \"multifusion_v2\": {\n+                    \"name\": \"MultiFusion V2\",\n+                    \"purpose\": \"Commit Type Classification\",\n+                    \"status\": \"available\" if multifusion_v2.is_model_available() else \"unavailable\",\n+                    \"features\": [\n+                        \"BERT-based semantic analysis\",\n+                        \"Code metrics integration\", \n+                        \"Programming language detection\",\n+                        \"Multi-modal fusion\"\n+                    ],\n+                    \"supported_commit_types\": multifusion_v2.get_model_info().get(\"supported_commit_types\", []) if multifusion_v2.is_model_available() else []\n+                },\n+                \"area_analyst\": {\n+                    \"name\": \"Area Analysis Model\",\n+                    \"purpose\": \"Development Area Classification (Frontend/Backend/Database...)\",\n+                    \"status\": \"available\" if area_service.model is not None else \"unavailable\",\n+                    \"features\": [\n+                        \"BERT + MLP fusion\",\n+                        \"Code area classification\",\n+                        \"File-based analysis\"\n+                    ],\n+                    \"supported_areas\": list(area_service.label_encoder.classes_) if area_service.model is not None else []\n+                },\n+                \"risk_analyst\": {\n+                    \"name\": \"Risk Analysis Model\", \n+                    \"purpose\": \"Commit Risk Level Assessment (High/Low Risk)\",\n+                    \"status\": \"available\" if risk_service.model is not None else \"unavailable\",\n+                    \"features\": [\n+                        \"Risk assessment\",\n+                        \"Change impact analysis\",\n+                        \"BERT + numerical features\"\n+                    ],\n+                    \"supported_risk_levels\": [\"lowrisk\", \"highrisk\"]\n+                }\n+            },\n+            \"integration\": {\n+                \"assignment_recommendation\": True,\n+                \"fallback_to_legacy\": True,\n+                \"ai_coverage_threshold\": 0.5,\n+                \"enhanced_scoring\": True\n+            },\n+            \"performance\": {\n+                \"ai_enhanced_accuracy\": \"Improved commit type and area detection\",\n+                \"recommendation_quality\": \"Higher precision with AI models\",\n+                \"fallback_available\": \"Legacy analysis as backup\"\n+            }\n+        }\n+        \n+    except Exception as e:\n+        logger.error(f\"Error checking AI models status: {e}\")\n+        raise HTTPException(status_code=500, detail=f\"Error checking AI models: {str(e)}\")\n+\n+@router.get(\"/test-assignment-recommendation/{repo_id}\")\n+async def test_ai_assignment_recommendation(\n+    repo_id: int,\n+    task_description: str = \"Implement new API endpoint for user management\",\n+    db: Session = Depends(get_db)\n+) -> Dict[str, Any]:\n+    \"\"\"\n+    Test endpoint để kiểm tra Assignment Recommendation với AI models\n+    \"\"\"\n+    try:\n+        service = AssignmentRecommendationService(db)\n+        \n+        # Analyze task to determine characteristics\n+        task_type = \"feature\"\n+        task_area = \"backend\" \n+        risk_level = \"medium\"\n+        \n+        # Simple heuristics\n+        description_lower = task_description.lower()\n+        if any(word in description_lower for word in [\"fix\", \"bug\", \"error\"]):\n+            task_type = \"fix\"\n+        elif any(word in description_lower for word in [\"frontend\", \"ui\", \"react\"]):\n+            task_area = \"frontend\"\n+        elif any(word in description_lower for word in [\"database\", \"sql\"]):\n+            task_area = \"database\"\n+            \n+        # Get AI-enhanced recommendations\n+        recommendations = service.recommend_assignees(\n+            repository_id=repo_id,\n+            task_type=task_type,\n+            task_area=task_area,\n+            risk_level=risk_level,\n+            required_skills=[\"python\"],\n+            top_k=3\n+        )\n+        \n+        # Analyze member skills to see AI coverage\n+        member_skills = service.analyze_member_skills(repo_id)\n+        \n+        ai_stats = {\n+            \"total_members\": len(member_skills),\n+            \"ai_enhanced_members\": sum(1 for profile in member_skills.values() if profile.get('ai_coverage', 0) > 0.5),\n+            \"avg_ai_coverage\": sum(profile.get('ai_coverage', 0) for profile in member_skills.values()) / len(member_skills) if member_skills else 0\n+        }\n+        \n+        return {\n+            \"success\": True,\n+            \"test_input\": {\n+                \"repository_id\": repo_id,\n+                \"task_description\": task_description,\n+                \"detected_task_type\": task_type,\n+                \"detected_area\": task_area,\n+                \"risk_level\": risk_level\n+            },\n+            \"recommendations\": recommendations,\n+            \"ai_analysis_stats\": ai_stats,\n+            \"model_usage\": {\n+                \"multifusion_v2\": \"Used for commit type classification\",\n+                \"area_analyst\": \"Used for development area detection\", \n+                \"risk_analyst\": \"Used for risk level assessment\"\n+            }\n+        }\n+        \n+    except Exception as e:\n+        logger.error(f\"Error testing AI assignment recommendation: {e}\")\n+        raise HTTPException(status_code=500, detail=f\"Error testing: {str(e)}\")\n+\n+@router.post(\"/compare-analysis\")\n+async def compare_legacy_vs_ai_analysis(\n+    repo_id: int,\n+    member_login: str,\n+    db: Session = Depends(get_db)\n+) -> Dict[str, Any]:\n+    \"\"\"\n+    So sánh kết quả phân tích giữa legacy methods và AI models cho một member\n+    \"\"\"\n+    try:\n+        service = AssignmentRecommendationService(db)\n+        \n+        # Get analysis results (will include both legacy and AI)\n+        member_skills = service.analyze_member_skills(repo_id)\n+        \n+        if member_login not in member_skills:\n+            raise HTTPException(status_code=404, detail=f\"Member {member_login} not found\")\n+        \n+        profile = member_skills[member_login]\n+        \n+        return {\n+            \"success\": True,\n+            \"member\": member_login,\n+            \"analysis_comparison\": {\n+                \"ai_coverage\": profile.get('ai_coverage', 0),\n+                \"total_commits\": profile['total_commits'],\n+                \"ai_analyzed_commits\": profile.get('ai_analysis_count', 0),\n+                \"legacy_analysis\": {\n+                    \"commit_types\": dict(profile['commit_types']),\n+                    \"areas\": dict(profile['areas']),\n+                    \"risk_levels\": dict(profile['risk_levels']),\n+                    \"risk_tolerance\": profile['risk_tolerance']\n+                },\n+                \"ai_predictions\": profile.get('ai_predictions', {}),\n+                \"expertise_areas\": profile['expertise_areas'],\n+                \"recommendation\": \"AI-enhanced\" if profile.get('ai_coverage', 0) > 0.5 else \"Legacy-based\"\n+            }\n+        }\n+        \n+    except HTTPException:\n+        raise\n+    except Exception as e:\n+        logger.error(f\"Error comparing analysis: {e}\")\n+        raise HTTPException(status_code=500, detail=f\"Error comparing: {str(e)}\")\n@@ -0,0 +1,410 @@\n+# backend/api/routes/assignment_recommendation.py\n+\"\"\"\n+Assignment Recommendation API Routes\n+Cung cấp các endpoints để đề xuất phân công thành viên dựa trên AI analysis\n+\"\"\"\n+\n+from fastapi import APIRouter, Depends, HTTPException, Query\n+from typing import List, Dict, Any, Optional\n+from sqlalchemy.orm import Session\n+from sqlalchemy import select\n+from pydantic import BaseModel\n+from db.database import get_db\n+from db.models.repositories import repositories\n+from services.assignment_recommendation_service import AssignmentRecommendationService\n+import logging\n+\n+logger = logging.getLogger(__name__)\n+\n+router = APIRouter(prefix=\"/assignment-recommendation\", tags=[\"Assignment Recommendation\"])\n+\n+# Pydantic models\n+class TaskRequirement(BaseModel):\n+    task_type: str  # feat, fix, docs, refactor, etc.\n+    task_area: str  # frontend, backend, database, etc.\n+    risk_level: str  # low, medium, high\n+    priority: Optional[str] = \"MEDIUM\"  # LOW, MEDIUM, HIGH, URGENT\n+    required_skills: Optional[List[str]] = None\n+    exclude_members: Optional[List[str]] = None\n+    description: Optional[str] = None\n+\n+class RecommendationResponse(BaseModel):\n+    member: str\n+    score: float\n+    adjusted_score: Optional[float] = None\n+    explanation: str\n+    profile_summary: Dict[str, Any]\n+    workload_info: Optional[Dict[str, Any]] = None\n+\n+class SkillAnalysisResponse(BaseModel):\n+    member: str\n+    total_commits: int\n+    expertise_areas: List[str]\n+    risk_tolerance: str\n+    recent_activity_score: float\n+    top_commit_types: Dict[str, int]\n+    top_areas: Dict[str, int]\n+    top_languages: Dict[str, int]\n+\n+# ==================== SIMPLIFIED ENDPOINTS FOR FRONTEND ====================\n+\n+class SmartAssignRequest(BaseModel):\n+    task_description: str\n+    required_skills: Optional[List[str]] = []\n+    consider_workload: Optional[bool] = True\n+\n+@router.get(\"/test/{owner}/{repo_name}\")\n+async def test_endpoint(\n+    owner: str,\n+    repo_name: str,\n+    db: Session = Depends(get_db)\n+):\n+    \"\"\"\n+    Test endpoint for debugging\n+    \"\"\"\n+    try:\n+        # Get repository from owner/repo_name\n+        query = select(repositories).where(\n+            repositories.c.owner == owner,\n+            repositories.c.name == repo_name\n+        )\n+        result = db.execute(query).fetchone()\n+        \n+        if not result:\n+            raise HTTPException(status_code=404, detail=f\"Repository {owner}/{repo_name} not found\")\n+        \n+        repo_id = result.id\n+        \n+        service = AssignmentRecommendationService(db)\n+        member_skills = service.analyze_member_skills(repo_id, 90)\n+        \n+        return {\n+            \"repo_id\": repo_id,\n+            \"member_skills_type\": str(type(member_skills)),\n+            \"member_count\": len(member_skills) if hasattr(member_skills, '__len__') else 0,\n+            \"first_member\": list(member_skills.keys())[0] if member_skills and hasattr(member_skills, 'keys') else None\n+        }\n+        \n+    except Exception as e:\n+        logger.error(f\"Error in test endpoint: {e}\")\n+        raise HTTPException(status_code=500, detail=str(e))\n+\n+@router.get(\"/member-skills/{owner}/{repo_name}\")\n+async def get_member_skills_simple(\n+    owner: str,\n+    repo_name: str,\n+    db: Session = Depends(get_db)\n+):\n+    \"\"\"\n+    Simplified member skills endpoint for frontend\n+    \"\"\"\n+    try:\n+        # Get repository from owner/repo_name\n+        query = select(repositories).where(\n+            repositories.c.owner == owner,\n+            repositories.c.name == repo_name\n+        )\n+        result = db.execute(query).fetchone()\n+        \n+        if not result:\n+            raise HTTPException(status_code=404, detail=f\"Repository {owner}/{repo_name} not found\")\n+        \n+        repo_id = result.id\n+        \n+        service = AssignmentRecommendationService(db)\n+        member_skills = service.analyze_member_skills(repo_id, 90)\n+        \n+        # Ensure member_skills is a dictionary\n+        if not isinstance(member_skills, dict):\n+            logger.error(f\"member_skills is not a dict: {type(member_skills)}\")\n+            member_skills = {}\n+        \n+        # Format for frontend\n+        members = []\n+        for username, profile in member_skills.items():\n+            if not isinstance(profile, dict) or profile.get('total_commits', 0) == 0:\n+                continue\n+                \n+            # Get top skills with confidence scores\n+            skills = []\n+            expertise_areas = profile.get('expertise_areas', [])\n+            \n+            # Handle expertise_areas as list (from service)\n+            if isinstance(expertise_areas, list):\n+                for skill in expertise_areas:\n+                    # Get confidence from area counts\n+                    area_counts = profile.get('areas', {})\n+                    confidence = area_counts.get(skill, 0) / max(profile.get('total_commits', 1), 1)\n+                    skills.append({\n+                        'skill': skill,\n+                        'confidence': float(confidence)\n+                    })\n+            elif isinstance(expertise_areas, dict):\n+                for skill, confidence in expertise_areas.items():\n+                    skills.append({\n+                        'skill': skill,\n+                        'confidence': float(confidence)\n+                    })\n+            \n+            # Add top commit types as skills\n+            commit_types = profile.get('commit_types', {})\n+            for commit_type, count in sorted(commit_types.items(), key=lambda x: x[1], reverse=True)[:3]:\n+                if count >= 2:  # Only include if significant\n+                    confidence = count / max(profile.get('total_commits', 1), 1)\n+                    skills.append({\n+                        'skill': f\"commit_{commit_type}\",\n+                        'confidence': float(confidence)\n+                    })\n+            \n+            # Add top languages as skills\n+            languages = profile.get('languages', {})\n+            for language, count in sorted(languages.items(), key=lambda x: x[1], reverse=True)[:3]:\n+                if count >= 2:  # Only include if significant\n+                    confidence = count / max(profile.get('total_commits', 1), 1)\n+                    skills.append({\n+                        'skill': f\"lang_{language}\",\n+                        'confidence': float(confidence)\n+                    })\n+            \n+            # Sort skills by confidence\n+            skills.sort(key=lambda x: x['confidence'], reverse=True)\n+            \n+            members.append({\n+                'username': username,\n+                'display_name': username,  # Could enhance this later\n+                'avatar_url': f\"https://github.com/{username}.png\",\n+                'total_commits': profile.get('total_commits', 0),\n+                'skills': skills[:10],  # Top 10 skills\n+                'recent_activity_score': round(profile.get('recent_activity_score', 0), 2)\n+            })\n+        \n+        # Sort members by total commits\n+        members.sort(key=lambda x: x['total_commits'], reverse=True)\n+        \n+        return {\n+            'members': members,\n+            'total_members': len(members)\n+        }\n+        \n+    except Exception as e:\n+        logger.error(f\"Error getting member skills: {e}\")\n+        raise HTTPException(status_code=500, detail=str(e))\n+\n+@router.get(\"/member-skills-simple/{owner}/{repo_name}\")\n+async def get_member_skills_simple_alias(\n+    owner: str,\n+    repo_name: str,\n+    db: Session = Depends(get_db)\n+):\n+    \"\"\"\n+    Alias endpoint for frontend compatibility\n+    \"\"\"\n+    return await get_member_skills_simple(owner, repo_name, db)\n+\n+@router.post(\"/smart-assign/{owner}/{repo_name}\")\n+async def smart_assign_simple(\n+    owner: str,\n+    repo_name: str,\n+    request: SmartAssignRequest,\n+    db: Session = Depends(get_db)\n+):\n+    \"\"\"\n+    Simplified smart assignment endpoint for frontend\n+    \"\"\"\n+    try:\n+        # Get repository\n+        query = select(repositories).where(\n+            repositories.c.owner == owner,\n+            repositories.c.name == repo_name\n+        )\n+        result = db.execute(query).fetchone()\n+        \n+        if not result:\n+            raise HTTPException(status_code=404, detail=f\"Repository {owner}/{repo_name} not found\")\n+        \n+        repo_id = result.id\n+        \n+        service = AssignmentRecommendationService(db)\n+        \n+        # Analyze task description to determine task characteristics\n+        task_type = \"feature\"  # Default\n+        task_area = \"general\"  # Default  \n+        risk_level = \"medium\"  # Default\n+        \n+        # Simple heuristics to determine task characteristics from description\n+        description_lower = request.task_description.lower()\n+        if any(word in description_lower for word in [\"fix\", \"bug\", \"error\", \"issue\"]):\n+            task_type = \"fix\"\n+        elif any(word in description_lower for word in [\"test\", \"testing\", \"spec\"]):\n+            task_type = \"test\"\n+        elif any(word in description_lower for word in [\"doc\", \"documentation\", \"readme\"]):\n+            task_type = \"docs\"\n+        elif any(word in description_lower for word in [\"refactor\", \"optimize\", \"clean\"]):\n+            task_type = \"refactor\"\n+        \n+        if any(word in description_lower for word in [\"frontend\", \"ui\", \"interface\", \"react\", \"component\"]):\n+            task_area = \"frontend\"\n+        elif any(word in description_lower for word in [\"backend\", \"api\", \"server\", \"database\"]):\n+            task_area = \"backend\"\n+        elif any(word in description_lower for word in [\"database\", \"sql\", \"query\"]):\n+            task_area = \"database\"\n+        \n+        # Get recommendations\n+        recommendations = service.recommend_with_workload_balance(\n+            repository_id=repo_id,\n+            task_type=task_type,\n+            task_area=task_area,\n+            risk_level=risk_level,\n+            task_priority=\"MEDIUM\",\n+            required_skills=request.required_skills or [],\n+            top_k=5\n+        )\n+        \n+        return {\n+            \"recommendations\": recommendations,\n+            \"task_analysis\": {\n+                \"detected_type\": task_type,\n+                \"detected_area\": task_area,\n+                \"risk_level\": risk_level\n+            }\n+        }\n+        \n+    except Exception as e:\n+        logger.error(f\"Error in smart assignment: {e}\")\n+        raise HTTPException(status_code=500, detail=str(e))\n+\n+@router.get(\"/team-insights/{owner}/{repo_name}\")\n+async def get_team_insights(\n+    owner: str,\n+    repo_name: str,\n+    days_back: int = Query(90, description=\"Số ngày quay lại để phân tích\"),\n+    db: Session = Depends(get_db)\n+) -> Dict[str, Any]:\n+    \"\"\"\n+    Phân tích insights tổng thể về team\n+    \"\"\"\n+    try:\n+        # Get repository from owner/repo_name\n+        query = select(repositories).where(\n+            repositories.c.owner == owner,\n+            repositories.c.name == repo_name\n+        )\n+        result = db.execute(query).fetchone()\n+        \n+        if not result:\n+            raise HTTPException(status_code=404, detail=f\"Repository {owner}/{repo_name} not found\")\n+        \n+        repo_id = result.id\n+        \n+        service = AssignmentRecommendationService(db)\n+        member_skills = service.analyze_member_skills(repo_id, days_back)\n+        \n+        # Ensure member_skills is a dictionary\n+        if not isinstance(member_skills, dict):\n+            logger.error(f\"member_skills is not a dict: {type(member_skills)}\")\n+            member_skills = {}\n+        \n+        # Calculate team insights\n+        active_profiles = {m: p for m, p in member_skills.items() if isinstance(p, dict) and p.get('total_commits', 0) > 0}\n+        total_members = len(active_profiles)\n+        total_commits = sum(p.get('total_commits', 0) for p in active_profiles.values())\n+        \n+        # Top skills across team\n+        all_skills = {}\n+        for profile in active_profiles.values():\n+            if not isinstance(profile, dict):\n+                continue\n+            expertise_areas = profile.get('expertise_areas', {})\n+            if isinstance(expertise_areas, dict):\n+                for skill, confidence in expertise_areas.items():\n+                    if skill not in all_skills:\n+                        all_skills[skill] = {'total_confidence': 0, 'member_count': 0}\n+                    all_skills[skill]['total_confidence'] += confidence\n+                    all_skills[skill]['member_count'] += 1\n+        \n+        top_skills = sorted(\n+            [{'skill': skill, 'member_count': data['member_count'], 'avg_confidence': data['total_confidence']/data['member_count']} \n+             for skill, data in all_skills.items()],\n+            key=lambda x: (x['member_count'], x['avg_confidence']),\n+            reverse=True\n+        )[:10]\n+        \n+        # Top contributors\n+        top_contributors = sorted(\n+            [{'username': member, 'commits': profile.get('total_commits', 0)} \n+             for member, profile in active_profiles.items()],\n+            key=lambda x: x['commits'],\n+            reverse=True\n+        )[:5]\n+        \n+        return {\n+            \"total_members\": total_members,\n+            \"active_members\": len([m for m, p in active_profiles.items() if p.get('recent_activity_score', 0) > 0.1]),\n+            \"total_commits\": total_commits,\n+            \"avg_commits_per_member\": round(total_commits / max(total_members, 1), 1),\n+            \"total_skills\": len(all_skills),\n+            \"top_skills\": top_skills,\n+            \"top_contributors\": top_contributors\n+        }\n+        \n+    except Exception as e:\n+        logger.error(f\"Error getting team insights: {e}\")\n+        raise HTTPException(status_code=500, detail=str(e))\n+\n+@router.get(\"/workload-analysis/{owner}/{repo_name}\")\n+async def get_workload_analysis(\n+    owner: str,\n+    repo_name: str,\n+    days_back: int = Query(30, description=\"Số ngày quay lại để phân tích\"),\n+    db: Session = Depends(get_db)\n+):\n+    \"\"\"\n+    Phân tích workload của các thành viên\n+    \"\"\"\n+    try:\n+        # Get repository from owner/repo_name\n+        query = select(repositories).where(\n+            repositories.c.owner == owner,\n+            repositories.c.name == repo_name\n+        )\n+        result = db.execute(query).fetchone()\n+        \n+        if not result:\n+            raise HTTPException(status_code=404, detail=f\"Repository {owner}/{repo_name} not found\")\n+        \n+        repo_id = result.id\n+        \n+        service = AssignmentRecommendationService(db)\n+        workload = service.get_member_workload(repo_id, days_back)\n+        \n+        return workload\n+        \n+    except Exception as e:\n+        logger.error(f\"Error getting workload analysis: {e}\")\n+        raise HTTPException(status_code=500, detail=str(e))\n+\n+# ==================== ALIAS ENDPOINTS FOR FRONTEND COMPATIBILITY ====================\n+\n+@router.post(\"/smart-assign-simple/{owner}/{repo_name}\")\n+async def smart_assign_simple_alias(\n+    owner: str,\n+    repo_name: str,\n+    request: SmartAssignRequest,\n+    db: Session = Depends(get_db)\n+):\n+    \"\"\"\n+    Alias endpoint for frontend compatibility\n+    \"\"\"\n+    return await smart_assign_simple(owner, repo_name, request, db)\n+\n+@router.get(\"/team-insights-simple/{owner}/{repo_name}\")\n+async def get_team_insights_simple_alias(\n+    owner: str,\n+    repo_name: str,\n+    days_back: int = Query(90, description=\"Số ngày quay lại để phân tích\"),\n+    db: Session = Depends(get_db)\n+):\n+    \"\"\"\n+    Alias endpoint for frontend compatibility\n+    \"\"\"\n+    return await get_team_insights(owner, repo_name, days_back, db)\n@@ -15,6 +15,8 @@\n from api.routes.commit_routes import router as commit_router\n from api.routes.area_analysis import area_analysis_router\n from api.routes.risk_analysis import risk_analysis_router # New import\n+from api.routes.assignment_recommendation import router as assignment_recommendation_router # New import\n+from api.routes.ai_status import router as ai_status_router # New AI status router\n import sys\n import os\n \n@@ -43,6 +45,8 @@\n app.include_router(commit_router)  # Already has /api prefix\n app.include_router(area_analysis_router)\n app.include_router(risk_analysis_router) # New router\n+app.include_router(assignment_recommendation_router, prefix=\"/api\") # New router\n+app.include_router(ai_status_router) # New AI status router\n #app.include_router(ai_router, prefix=\"/api/ai\")\n \n @app.get(\"/\")\n@@ -0,0 +1,763 @@\n+# backend/services/assignment_recommendation_service.py\n+\"\"\"\n+Assignment Recommendation Service - Đề xuất phân công thành viên dựa trên phân tích commit history\n+Sử dụng AI analysis results từ MultiFusion V2 và member analysis để đề xuất người phù hợp\n+\"\"\"\n+\n+from typing import List, Dict, Any, Optional, Tuple\n+from sqlalchemy.orm import Session\n+from sqlalchemy import text\n+from datetime import datetime, timedelta\n+from collections import defaultdict\n+import logging\n+import math\n+from services.multifusion_v2_service import MultiFusionV2Service\n+from services.area_analysis_service import AreaAnalysisService\n+from services.risk_analysis_service import RiskAnalysisService\n+\n+logger = logging.getLogger(__name__)\n+\n+class AssignmentRecommendationService:\n+    def __init__(self, db: Session):\n+        self.db = db\n+        # Initialize AI services\n+        self.multifusion_v2_service = MultiFusionV2Service()\n+        self.area_analysis_service = AreaAnalysisService()\n+        self.risk_analysis_service = RiskAnalysisService()\n+    \n+    def analyze_member_skills(self, repository_id: int, days_back: int = 90) -> Dict[str, Dict[str, Any]]:\n+        \"\"\"\n+        Phân tích kỹ năng và thế mạnh của từng thành viên dựa trên commit history\n+        Sử dụng AI models: MultiFusion V2, Area Analyst, Risk Analyst\n+        \n+        Args:\n+            repository_id: ID của repository\n+            days_back: Số ngày quay lại để phân tích (mặc định 90 ngày)\n+            \n+        Returns:\n+            Dict với key là member login, value là skill profile với AI analysis\n+        \"\"\"\n+        cutoff_date = datetime.now() - timedelta(days=days_back)\n+        \n+        # Query để lấy thống kê commit của từng member\n+        query = text(\"\"\"\n+            SELECT \n+                c.author_name,\n+                c.message,\n+                c.insertions,\n+                c.deletions,\n+                c.files_changed,\n+                c.modified_files,\n+                c.committer_date,\n+                c.branch_name,\n+                c.diff_content\n+            FROM commits c\n+            WHERE c.repo_id = :repo_id \n+                AND c.committer_date >= :cutoff_date\n+            ORDER BY c.committer_date DESC\n+        \"\"\")\n+        \n+        commits_data = self.db.execute(query, {\n+            \"repo_id\": repository_id,\n+            \"cutoff_date\": cutoff_date\n+        }).fetchall()\n+        \n+        member_skills = defaultdict(lambda: {\n+            'commit_types': defaultdict(int),\n+            'areas': defaultdict(int),\n+            'risk_levels': defaultdict(int),\n+            'languages': defaultdict(int),\n+            'total_commits': 0,\n+            'total_changes': 0,\n+            'avg_files_per_commit': 0.0,\n+            'recent_activity_score': 0.0,\n+            'expertise_areas': [],\n+            'risk_tolerance': 'low',\n+            'ai_analysis_count': 0,\n+            'ai_predictions': {\n+                'commit_types': defaultdict(int),\n+                'areas': defaultdict(int), \n+                'risks': defaultdict(int)\n+            }\n+        })\n+        \n+        logger.info(f\"Analyzing {len(commits_data)} commits with AI models...\")\n+        \n+        for commit in commits_data:\n+            author = commit[0]\n+            message = commit[1]\n+            insertions = commit[2] or 0\n+            deletions = commit[3] or 0\n+            files_changed = commit[4] or 0\n+            modified_files = commit[5]\n+            commit_date = commit[6]\n+            diff_content = commit[8] or ''\n+            \n+            # Legacy analysis (fallback)\n+            commit_type_legacy = self._analyze_commit_type_from_message(message)\n+            area_legacy = self._analyze_area_from_files(modified_files)\n+            risk_level_legacy = self._analyze_risk_level(insertions, deletions, files_changed)\n+            language = self._detect_language_from_files(modified_files)\n+            \n+            # AI Analysis using the 3 models\n+            try:\n+                # 1. MultiFusion V2 for commit type\n+                ai_commit_prediction = self.multifusion_v2_service.predict_commit_type(\n+                    commit_message=message,\n+                    lines_added=insertions,\n+                    lines_removed=deletions,\n+                    files_count=files_changed,\n+                    detected_language=language\n+                )\n+                \n+                # 2. Area Analysis\n+                commit_data_for_area = {\n+                    'commit_message': message,\n+                    'diff_content': diff_content,\n+                    'files_count': files_changed,\n+                    'lines_added': insertions,\n+                    'lines_removed': deletions,\n+                    'total_changes': insertions + deletions\n+                }\n+                ai_area = self.area_analysis_service.predict_area(commit_data_for_area)\n+                \n+                # 3. Risk Analysis\n+                ai_risk = self.risk_analysis_service.predict_risk(commit_data_for_area)\n+                \n+                # Use AI predictions if available, fallback to legacy\n+                commit_type = ai_commit_prediction.get('commit_type', commit_type_legacy)\n+                area = ai_area if ai_area != \"Model not loaded\" else area_legacy\n+                risk_level = ai_risk if ai_risk != \"Model not loaded\" else risk_level_legacy\n+                \n+                # Track AI predictions\n+                profile = member_skills[author]\n+                profile['ai_predictions']['commit_types'][commit_type] += 1\n+                profile['ai_predictions']['areas'][area] += 1\n+                profile['ai_predictions']['risks'][risk_level] += 1\n+                profile['ai_analysis_count'] += 1\n+                \n+                logger.debug(f\"AI Analysis for {author}: type={commit_type}, area={area}, risk={risk_level}\")\n+                \n+            except Exception as e:\n+                logger.warning(f\"AI analysis failed for commit by {author}, using fallback: {e}\")\n+                commit_type = commit_type_legacy\n+                area = area_legacy\n+                risk_level = risk_level_legacy\n+            \n+            # Cập nhật skill profile\n+            profile = member_skills[author]\n+            profile['commit_types'][commit_type] += 1\n+            profile['areas'][area] += 1\n+            profile['risk_levels'][risk_level] += 1\n+            profile['languages'][language] += 1\n+            profile['total_commits'] += 1\n+            profile['total_changes'] += insertions + deletions\n+            \n+            # Tính recent activity score (commits gần đây có trọng số cao hơn)\n+            days_ago = (datetime.now() - commit_date).days if commit_date else 90\n+            recency_weight = max(0.1, 1.0 - (days_ago / days_back))\n+            profile['recent_activity_score'] += recency_weight\n+        \n+        # Tính toán các metric cuối cùng\n+        for author, profile in member_skills.items():\n+            if profile['total_commits'] > 0:\n+                # Tính average files per commit\n+                total_files = sum(profile['areas'].values())\n+                profile['avg_files_per_commit'] = total_files / profile['total_commits']\n+                \n+                # Xác định expertise areas (top 2 areas, ưu tiên AI predictions)\n+                if profile['ai_analysis_count'] > 0:\n+                    # Use AI predictions for expertise areas\n+                    ai_areas = profile['ai_predictions']['areas']\n+                    sorted_areas = sorted(ai_areas.items(), key=lambda x: x[1], reverse=True)\n+                else:\n+                    # Fallback to legacy analysis\n+                    sorted_areas = sorted(profile['areas'].items(), key=lambda x: x[1], reverse=True)\n+                \n+                profile['expertise_areas'] = [area for area, count in sorted_areas[:2] if count >= 2]\n+                \n+                # Xác định risk tolerance (ưu tiên AI predictions)\n+                if profile['ai_analysis_count'] > 0:\n+                    ai_risks = profile['ai_predictions']['risks']\n+                    total_ai_commits = sum(ai_risks.values())\n+                    high_risk_ratio = (ai_risks.get('highrisk', 0) + ai_risks.get('high', 0)) / total_ai_commits if total_ai_commits > 0 else 0\n+                else:\n+                    # Fallback to legacy analysis\n+                    high_risk_ratio = profile['risk_levels']['high'] / profile['total_commits']\n+                \n+                if high_risk_ratio > 0.3:\n+                    profile['risk_tolerance'] = 'high'\n+                elif high_risk_ratio > 0.1:\n+                    profile['risk_tolerance'] = 'medium'\n+                else:\n+                    profile['risk_tolerance'] = 'low'\n+                \n+                # Add AI analysis summary\n+                profile['ai_coverage'] = profile['ai_analysis_count'] / profile['total_commits'] if profile['total_commits'] > 0 else 0\n+        \n+        logger.info(f\"Completed AI-enhanced analysis for {len(member_skills)} members\")\n+        return dict(member_skills)\n+    \n+    def recommend_assignees(\n+        self, \n+        repository_id: int, \n+        task_type: str, \n+        task_area: str, \n+        risk_level: str,\n+        required_skills: Optional[List[str]] = None,\n+        exclude_members: Optional[List[str]] = None,\n+        top_k: int = 3\n+    ) -> List[Dict[str, Any]]:\n+        \"\"\"\n+        Đề xuất thành viên phù hợp cho một task cụ thể\n+        \n+        Args:\n+            repository_id: ID của repository\n+            task_type: Loại task (feat, fix, docs, refactor, etc.)\n+            task_area: Phạm vi task (frontend, backend, database, etc.)\n+            risk_level: Mức độ rủi ro (low, medium, high)\n+            required_skills: Danh sách kỹ năng yêu cầu (optional)\n+            exclude_members: Danh sách members không xem xét (optional)\n+            top_k: Số lượng đề xuất tối đa\n+            \n+        Returns:\n+            List các đề xuất với score và lý do\n+        \"\"\"\n+        member_skills = self.analyze_member_skills(repository_id)\n+        \n+        if not member_skills:\n+            return []\n+        \n+        recommendations = []\n+        \n+        for member, profile in member_skills.items():\n+            if exclude_members and member in exclude_members:\n+                continue\n+                \n+            if profile['total_commits'] == 0:\n+                continue\n+            \n+            # Tính matching score\n+            score = self._calculate_matching_score(\n+                profile, task_type, task_area, risk_level, required_skills\n+            )\n+            \n+            # Tạo explanation\n+            explanation = self._generate_explanation(\n+                profile, task_type, task_area, risk_level\n+            )\n+            \n+            recommendations.append({\n+                'member': member,\n+                'score': round(score, 2),\n+                'explanation': explanation,\n+                'profile_summary': {\n+                    'total_commits': profile['total_commits'],\n+                    'expertise_areas': profile['expertise_areas'],\n+                    'risk_tolerance': profile['risk_tolerance'],\n+                    'recent_activity_score': round(profile['recent_activity_score'], 2),\n+                    'top_commit_types': dict(sorted(\n+                        profile['commit_types'].items(), \n+                        key=lambda x: x[1], \n+                        reverse=True\n+                    )[:3])\n+                }\n+            })\n+        \n+        # Sắp xếp theo score và trả về top k\n+        recommendations.sort(key=lambda x: x['score'], reverse=True)\n+        return recommendations[:top_k]\n+    \n+    def _calculate_matching_score(\n+        self, \n+        profile: Dict[str, Any], \n+        task_type: str, \n+        task_area: str, \n+        risk_level: str,\n+        required_skills: Optional[List[str]] = None\n+    ) -> float:\n+        \"\"\"Tính toán điểm phù hợp cho một member dựa trên AI analysis\"\"\"\n+        score = 0.0\n+        \n+        # Determine whether to use AI predictions or legacy analysis\n+        use_ai = profile.get('ai_coverage', 0) > 0.5  # Use AI if >50% commits analyzed by AI\n+        \n+        if use_ai and 'ai_predictions' in profile:\n+            # Use AI predictions for scoring\n+            ai_commit_types = profile['ai_predictions']['commit_types']\n+            ai_areas = profile['ai_predictions']['areas']\n+            ai_risks = profile['ai_predictions']['risks']\n+            \n+            # 1. Task type experience (30% of total score) - AI enhanced\n+            ai_task_type_count = ai_commit_types.get(task_type, 0)\n+            total_ai_commits = sum(ai_commit_types.values())\n+            if total_ai_commits > 0:\n+                ai_task_type_ratio = ai_task_type_count / total_ai_commits\n+                score += ai_task_type_ratio * 30\n+                logger.debug(f\"AI Task type score: {ai_task_type_ratio * 30}\")\n+            \n+            # 2. Area expertise (35% of total score) - AI enhanced\n+            ai_area_count = ai_areas.get(task_area, 0)\n+            # Also check for related areas\n+            related_areas = self._get_related_areas(task_area)\n+            for related_area in related_areas:\n+                ai_area_count += ai_areas.get(related_area, 0) * 0.5  # 50% weight for related areas\n+                \n+            if total_ai_commits > 0:\n+                ai_area_ratio = min(1.0, ai_area_count / total_ai_commits)  # Cap at 1.0\n+                score += ai_area_ratio * 35\n+                logger.debug(f\"AI Area score: {ai_area_ratio * 35}\")\n+            \n+            # 3. Risk tolerance match (25% of total score) - AI enhanced\n+            ai_risk_tolerance = self._calculate_ai_risk_tolerance(ai_risks)\n+            risk_match_score = self._get_risk_match_score(ai_risk_tolerance, risk_level)\n+            score += risk_match_score * 25\n+            logger.debug(f\"AI Risk score: {risk_match_score * 25}\")\n+            \n+        else:\n+            # Fallback to legacy analysis\n+            total_commits = profile['total_commits']\n+            \n+            # 1. Task type experience (25% of total score)\n+            task_type_count = profile['commit_types'].get(task_type, 0)\n+            if total_commits > 0:\n+                task_type_ratio = task_type_count / total_commits\n+                score += task_type_ratio * 25\n+            \n+            # 2. Area expertise (30% of total score)\n+            area_count = profile['areas'].get(task_area, 0)\n+            if total_commits > 0:\n+                area_ratio = area_count / total_commits\n+                score += area_ratio * 30\n+            \n+            # 3. Risk tolerance match (20% of total score)\n+            risk_tolerance = profile['risk_tolerance']\n+            risk_match_score = self._get_risk_match_score(risk_tolerance, risk_level)\n+            score += risk_match_score * 20\n+        \n+        # 4. Recent activity (10% of total score)\n+        activity_score = min(1.0, profile['recent_activity_score'] / 10)  # Normalize\n+        score += activity_score * 10\n+        \n+        # 5. Overall experience (10% of total score)\n+        total_commits = profile['total_commits']\n+        experience_score = min(1.0, total_commits / 50)  # Normalize với max 50 commits\n+        score += experience_score * 10\n+        \n+        # Bonus for required skills\n+        if required_skills:\n+            skill_bonus = 0\n+            for skill in required_skills:\n+                if skill in profile['languages'] and profile['languages'][skill] > 0:\n+                    skill_bonus += 5\n+            score += min(skill_bonus, 15)  # Max 15 bonus points\n+        \n+        # AI analysis bonus\n+        if use_ai:\n+            score += 5  # 5 point bonus for AI-enhanced analysis\n+        \n+        return score\n+    \n+    def _get_risk_match_score(self, member_tolerance: str, task_risk: str) -> float:\n+        \"\"\"Tính điểm phù hợp về risk tolerance\"\"\"\n+        risk_matrix = {\n+            ('high', 'high'): 1.0,\n+            ('high', 'medium'): 0.8,\n+            ('high', 'low'): 0.6,\n+            ('medium', 'high'): 0.7,\n+            ('medium', 'medium'): 1.0,\n+            ('medium', 'low'): 0.9,\n+            ('low', 'high'): 0.3,\n+            ('low', 'medium'): 0.7,\n+            ('low', 'low'): 1.0,\n+        }\n+        return risk_matrix.get((member_tolerance, task_risk), 0.5)\n+    \n+    def _get_related_areas(self, task_area: str) -> List[str]:\n+        \"\"\"Lấy danh sách areas liên quan để mở rộng matching\"\"\"\n+        related_map = {\n+            'frontend': ['ui', 'interface', 'web'],\n+            'backend': ['api', 'server', 'service'],\n+            'database': ['data', 'storage', 'sql'],\n+            'devops': ['deployment', 'infrastructure', 'ci'],\n+            'mobile': ['android', 'ios', 'app'],\n+            'docs': ['documentation', 'readme'],\n+            'testing': ['test', 'qa', 'spec']\n+        }\n+        return related_map.get(task_area, [])\n+    \n+    def _calculate_ai_risk_tolerance(self, ai_risks: Dict[str, int]) -> str:\n+        \"\"\"Tính toán risk tolerance từ AI predictions\"\"\"\n+        total_ai_commits = sum(ai_risks.values())\n+        if total_ai_commits == 0:\n+            return 'low'\n+        \n+        high_risk_count = ai_risks.get('highrisk', 0) + ai_risks.get('high', 0)\n+        high_risk_ratio = high_risk_count / total_ai_commits\n+        \n+        if high_risk_ratio > 0.4:\n+            return 'high'\n+        elif high_risk_ratio > 0.15:\n+            return 'medium'\n+        else:\n+            return 'low'\n+    \n+    def _generate_explanation(\n+        self, \n+        profile: Dict[str, Any], \n+        task_type: str, \n+        task_area: str, \n+        risk_level: str\n+    ) -> str:\n+        \"\"\"Tạo explanation cho đề xuất với thông tin AI analysis\"\"\"\n+        explanations = []\n+        \n+        # Determine if using AI analysis\n+        use_ai = profile.get('ai_coverage', 0) > 0.5\n+        \n+        if use_ai and 'ai_predictions' in profile:\n+            # AI-enhanced explanations\n+            ai_commit_types = profile['ai_predictions']['commit_types']\n+            ai_areas = profile['ai_predictions']['areas']\n+            ai_risks = profile['ai_predictions']['risks']\n+            \n+            # Experience với task type (AI)\n+            task_type_count = ai_commit_types.get(task_type, 0)\n+            if task_type_count > 0:\n+                explanations.append(f\"AI phân tích: {task_type_count} commits loại {task_type}\")\n+            \n+            # Experience với area (AI)\n+            area_count = ai_areas.get(task_area, 0)\n+            if area_count > 0:\n+                explanations.append(f\"AI phân tích: {area_count} commits trong {task_area}\")\n+            \n+            # Risk tolerance (AI)\n+            ai_risk_tolerance = self._calculate_ai_risk_tolerance(ai_risks)\n+            if ai_risk_tolerance == 'high' and risk_level == 'high':\n+                explanations.append(\"AI xác nhận: Chuyên xử lý tasks rủi ro cao\")\n+            elif ai_risk_tolerance == 'low' and risk_level == 'low':\n+                explanations.append(\"AI xác nhận: Chuyên xử lý tasks ổn định\")\n+                \n+            # AI coverage info\n+            ai_coverage_pct = int(profile['ai_coverage'] * 100)\n+            explanations.append(f\"Phân tích AI: {ai_coverage_pct}% commits\")\n+            \n+        else:\n+            # Legacy explanations\n+            # Experience với task type\n+            task_type_count = profile['commit_types'].get(task_type, 0)\n+            if task_type_count > 0:\n+                explanations.append(f\"Có {task_type_count} commits loại {task_type}\")\n+            \n+            # Experience với area\n+            area_count = profile['areas'].get(task_area, 0)\n+            if area_count > 0:\n+                explanations.append(f\"Có {area_count} commits trong {task_area}\")\n+            \n+            # Risk tolerance\n+            risk_tolerance = profile['risk_tolerance']\n+            if risk_tolerance == 'high' and risk_level == 'high':\n+                explanations.append(\"Thường xuyên xử lý tasks có độ rủi ro cao\")\n+            elif risk_tolerance == 'low' and risk_level == 'low':\n+                explanations.append(\"Chuyên xử lý tasks ổn định, ít rủi ro\")\n+        \n+        # Common explanations\n+        # Recent activity\n+        if profile['recent_activity_score'] > 5:\n+            explanations.append(\"Hoạt động tích cực gần đây\")\n+        \n+        # Expertise areas\n+        if task_area in profile['expertise_areas']:\n+            explanations.append(f\"Chuyên gia về {task_area}\")\n+        \n+        return \"; \".join(explanations) if explanations else \"Thành viên phù hợp dựa trên tổng thể\"\n+    \n+    def _analyze_commit_type_from_message(self, message: str) -> str:\n+        \"\"\"Phân tích loại commit từ message\"\"\"\n+        if not message:\n+            return 'other'\n+        \n+        message_lower = message.lower()\n+        \n+        # Conventional commit format\n+        if message_lower.startswith('feat'):\n+            return 'feat'\n+        elif message_lower.startswith('fix'):\n+            return 'fix'\n+        elif message_lower.startswith('docs'):\n+            return 'docs'\n+        elif message_lower.startswith('refactor'):\n+            return 'refactor'\n+        elif message_lower.startswith('test'):\n+            return 'test'\n+        elif message_lower.startswith('chore'):\n+            return 'chore'\n+        elif message_lower.startswith('style'):\n+            return 'style'\n+        elif message_lower.startswith('perf'):\n+            return 'perf'\n+        \n+        # Keyword-based detection\n+        if any(word in message_lower for word in ['feature', 'add', 'implement']):\n+            return 'feat'\n+        elif any(word in message_lower for word in ['fix', 'bug', 'error', 'issue']):\n+            return 'fix'\n+        elif any(word in message_lower for word in ['doc', 'readme', 'comment']):\n+            return 'docs'\n+        elif any(word in message_lower for word in ['refactor', 'cleanup', 'restructure']):\n+            return 'refactor'\n+        elif any(word in message_lower for word in ['test', 'spec', 'coverage']):\n+            return 'test'\n+        \n+        return 'other'\n+    \n+    def _analyze_area_from_files(self, modified_files) -> str:\n+        \"\"\"Phân tích area từ danh sách files được modify\"\"\"\n+        if not modified_files:\n+            return 'general'\n+        \n+        try:\n+            import json\n+            if isinstance(modified_files, str):\n+                files_list = json.loads(modified_files)\n+            elif isinstance(modified_files, list):\n+                files_list = modified_files\n+            else:\n+                return 'general'\n+        except:\n+            return 'general'\n+        \n+        area_indicators = {\n+            'frontend': ['.jsx', '.tsx', '.js', '.ts', '.vue', '.css', '.scss', '.html'],\n+            'backend': ['.py', '.java', '.go', '.php', '.rb', '.cs'],\n+            'database': ['.sql', 'migration', 'schema'],\n+            'devops': ['dockerfile', '.yml', '.yaml', '.sh', '.json', 'docker'],\n+            'mobile': ['.swift', '.kt', '.dart'],\n+            'docs': ['.md', '.txt', '.rst', 'readme']\n+        }\n+        \n+        area_scores = defaultdict(int)\n+        \n+        for file_path in files_list:\n+            if isinstance(file_path, str):\n+                file_lower = file_path.lower()\n+                \n+                for area, indicators in area_indicators.items():\n+                    for indicator in indicators:\n+                        if indicator in file_lower:\n+                            area_scores[area] += 1\n+        \n+        if area_scores:\n+            return max(area_scores.items(), key=lambda x: x[1])[0]\n+        \n+        return 'general'\n+    \n+    def _analyze_risk_level(self, insertions: int, deletions: int, files_changed: int) -> str:\n+        \"\"\"Phân tích mức độ rủi ro dựa trên metrics\"\"\"\n+        total_changes = insertions + deletions\n+        \n+        # High risk indicators\n+        if (total_changes > 1000 or \n+            files_changed > 20 or \n+            deletions > 500):\n+            return 'high'\n+        \n+        # Medium risk indicators  \n+        if (total_changes > 200 or \n+            files_changed > 5 or\n+            deletions > 100):\n+            return 'medium'\n+        \n+        return 'low'\n+    \n+    def _detect_language_from_files(self, modified_files) -> str:\n+        \"\"\"Phát hiện ngôn ngữ lập trình chính\"\"\"\n+        if not modified_files:\n+            return 'unknown'\n+        \n+        try:\n+            import json\n+            if isinstance(modified_files, str):\n+                files_list = json.loads(modified_files)\n+            elif isinstance(modified_files, list):\n+                files_list = modified_files\n+            else:\n+                return 'unknown'\n+        except:\n+            return 'unknown'\n+        \n+        language_map = {\n+            '.py': 'Python',\n+            '.js': 'JavaScript', \n+            '.jsx': 'JavaScript',\n+            '.ts': 'TypeScript',\n+            '.tsx': 'TypeScript',\n+            '.java': 'Java',\n+            '.cpp': 'C++',\n+            '.c': 'C++',\n+            '.cs': 'C#',\n+            '.php': 'PHP',\n+            '.rb': 'Ruby',\n+            '.go': 'Go',\n+            '.rs': 'Rust',\n+            '.html': 'HTML',\n+            '.css': 'CSS',\n+            '.scss': 'CSS'\n+        }\n+        \n+        language_count = defaultdict(int)\n+        for file_path in files_list:\n+            if isinstance(file_path, str):\n+                import os\n+                _, ext = os.path.splitext(file_path.lower())\n+                language = language_map.get(ext, 'other')\n+                language_count[language] += 1\n+        \n+        if language_count:\n+            return max(language_count.items(), key=lambda x: x[1])[0]\n+        \n+        return 'unknown'\n+\n+    def get_member_workload(self, repository_id: int, days_back: int = 30) -> Dict[str, Dict[str, Any]]:\n+        \"\"\"\n+        Phân tích workload hiện tại của các thành viên\n+        \"\"\"\n+        try:\n+            cutoff_date = datetime.now() - timedelta(days=days_back)\n+            \n+            # Query active tasks\n+            task_query = text(\"\"\"\n+                SELECT \n+                    pt.assignee_github_username,\n+                    pt.status,\n+                    pt.priority,\n+                    COUNT(*) as task_count\n+                FROM project_tasks pt\n+                WHERE pt.repository_id = :repo_id \n+                    AND pt.status IN ('TODO', 'IN_PROGRESS')\n+                    AND pt.created_at >= :cutoff_date\n+                    AND pt.assignee_github_username IS NOT NULL\n+                GROUP BY pt.assignee_github_username, pt.status, pt.priority\n+            \"\"\")\n+            \n+            task_results = self.db.execute(task_query, {\n+                \"repo_id\": repository_id,\n+                \"cutoff_date\": cutoff_date\n+            }).fetchall()\n+            \n+            logger.info(f\"Found {len(task_results)} task workload records for repository {repository_id}\")\n+            \n+            member_workload = defaultdict(lambda: {\n+                'active_tasks': 0,\n+                'in_progress_tasks': 0,\n+                'high_priority_tasks': 0,\n+                'workload_score': 0.0\n+            })\n+            \n+            for result in task_results:\n+                member = result[0]\n+                if not member:\n+                    continue\n+                    \n+                status = result[1]\n+                priority = result[2]\n+                count = result[3]\n+                \n+                workload = member_workload[member]\n+                workload['active_tasks'] += count\n+                \n+                if status == 'IN_PROGRESS':\n+                    workload['in_progress_tasks'] += count\n+                \n+                if priority in ['HIGH', 'URGENT']:\n+                    workload['high_priority_tasks'] += count\n+                \n+                # Calculate workload score\n+                priority_weight = {'LOW': 1, 'MEDIUM': 2, 'HIGH': 3, 'URGENT': 4}\n+                status_weight = {'TODO': 1, 'IN_PROGRESS': 1.5}\n+                \n+                weight = priority_weight.get(priority, 1) * status_weight.get(status, 1)\n+                workload['workload_score'] += count * weight\n+            \n+            return dict(member_workload)\n+            \n+        except Exception as e:\n+            logger.error(f\"Error getting member workload for repository {repository_id}: {str(e)}\")\n+            return {}\n+\n+    def recommend_with_workload_balance(\n+        self,\n+        repository_id: int,\n+        task_type: str,\n+        task_area: str, \n+        risk_level: str,\n+        task_priority: str = 'MEDIUM',\n+        required_skills: Optional[List[str]] = None,\n+        top_k: int = 3\n+    ) -> List[Dict[str, Any]]:\n+        \"\"\"\n+        Đề xuất phân công có tính đến workload balancing\n+        \"\"\"\n+        try:\n+            # Lấy recommendations cơ bản\n+            basic_recommendations = self.recommend_assignees(\n+                repository_id, task_type, task_area, risk_level, required_skills, None, top_k * 2\n+            )\n+            \n+            if not basic_recommendations:\n+                logger.warning(f\"No basic recommendations found for repository {repository_id}\")\n+                return []\n+            \n+            # Lấy workload hiện tại\n+            workloads = self.get_member_workload(repository_id)\n+            logger.info(f\"Retrieved workload for {len(workloads)} members\")\n+            \n+            # Điều chỉnh score dựa trên workload\n+            for rec in basic_recommendations:\n+                member = rec['member']\n+                workload = workloads.get(member, {\n+                    'workload_score': 0.0,\n+                    'active_tasks': 0,\n+                    'in_progress_tasks': 0,\n+                    'high_priority_tasks': 0\n+                })\n+                \n+                # Penalty cho workload cao\n+                workload_penalty = min(20, workload.get('workload_score', 0) * 2)  # Max 20 points penalty\n+                \n+                # Bonus cho members có ít việc\n+                if workload.get('workload_score', 0) < 2:\n+                    workload_bonus = 5\n+                else:\n+                    workload_bonus = 0\n+                \n+                # Điều chỉnh score\n+                original_score = rec['score']\n+                adjusted_score = original_score - workload_penalty + workload_bonus\n+                rec['adjusted_score'] = max(0, adjusted_score)\n+                \n+                # Cập nhật explanation\n+                active_tasks = workload.get('active_tasks', 0)\n+                if active_tasks > 0:\n+                    rec['explanation'] += f\" (Hiện có {active_tasks} tasks active)\"\n+                else:\n+                    rec['explanation'] += \" (Hiện tại rảnh)\"\n+                \n+                # Thêm workload info\n+                rec['workload_info'] = workload\n+            \n+            # Sắp xếp lại theo adjusted score\n+            basic_recommendations.sort(key=lambda x: x.get('adjusted_score', x['score']), reverse=True)\n+            \n+            return basic_recommendations[:top_k]\n+            \n+        except Exception as e:\n+            logger.error(f\"Error in recommend_with_workload_balance: {str(e)}\")\n+            # Fallback to basic recommendations without workload balancing\n+            try:\n+                return self.recommend_assignees(\n+                    repository_id, task_type, task_area, risk_level, required_skills, None, top_k\n+                )\n+            except Exception as fallback_error:\n+                logger.error(f\"Fallback also failed: {str(fallback_error)}\")\n+                return []\n@@ -0,0 +1,39 @@\n+import re\n+\n+# Read the file\n+with open(r'c:\\SAN\\KLTN\\KLTN04\\backend\\api\\routes\\assignment_recommendation.py', 'r', encoding='utf-8') as f:\n+    content = f.read()\n+\n+# Pattern to match the ORM query pattern\n+pattern = r'''        # Get repository from owner/repo_name\n+        repo = db\\.query\\(Repository\\)\\.filter\\(\n+            Repository\\.owner == owner,\n+            Repository\\.name == repo_name\n+        \\)\\.first\\(\\)\n+        \n+        if not repo:\n+            raise HTTPException\\(status_code=404, detail=f\"Repository \\{owner\\}/\\{repo_name\\} not found\"\\)'''\n+\n+replacement = '''        # Get repository from owner/repo_name\n+        query = select(repositories).where(\n+            repositories.c.owner == owner,\n+            repositories.c.name == repo_name\n+        )\n+        result = db.execute(query).fetchone()\n+        \n+        if not result:\n+            raise HTTPException(status_code=404, detail=f\"Repository {owner}/{repo_name} not found\")\n+        \n+        repo_id = result.id'''\n+\n+# Replace all occurrences\n+content = re.sub(pattern, replacement, content, flags=re.MULTILINE)\n+\n+# Replace all repo.id with repo_id\n+content = re.sub(r'repo\\.id', 'repo_id', content)\n+\n+# Write back\n+with open(r'c:\\SAN\\KLTN\\KLTN04\\backend\\api\\routes\\assignment_recommendation.py', 'w', encoding='utf-8') as f:\n+    f.write(content)\n+\n+print(\"File updated successfully!\")\n@@ -0,0 +1,370 @@\n+// frontend/src/components/Dashboard/AssignmentRecommendation.jsx\n+import React, { useState, useEffect } from 'react';\n+import { Card, Button, List, Avatar, Tag, Tooltip, Modal, Form, Select, Input, Spin, Alert } from 'antd';\n+import { UserOutlined, TrophyOutlined, ThunderboltOutlined, TeamOutlined } from '@ant-design/icons';\n+import { assignmentRecommendationAPI } from '../../services/api';\n+\n+const { Option } = Select;\n+\n+const AssignmentRecommendation = ({ repositoryId, onAssign }) => {\n+  const [loading, setLoading] = useState(false);\n+  const [recommendations, setRecommendations] = useState([]);\n+  const [memberSkills, setMemberSkills] = useState([]);\n+  const [teamInsights, setTeamInsights] = useState(null);\n+  const [modalVisible, setModalVisible] = useState(false);\n+  const [form] = Form.useForm();\n+\n+  const taskTypes = [\n+    { value: 'feat', label: '✨ Feature', color: 'blue' },\n+    { value: 'fix', label: '🐛 Bug Fix', color: 'red' },\n+    { value: 'docs', label: '📝 Documentation', color: 'green' },\n+    { value: 'refactor', label: '♻️ Refactor', color: 'orange' },\n+    { value: 'test', label: '✅ Test', color: 'purple' },\n+    { value: 'chore', label: '🔧 Chore', color: 'gray' },\n+    { value: 'style', label: '💄 Style', color: 'pink' },\n+    { value: 'perf', label: '⚡ Performance', color: 'yellow' }\n+  ];\n+\n+  const taskAreas = [\n+    { value: 'frontend', label: '🎨 Frontend', color: 'blue' },\n+    { value: 'backend', label: '⚙️ Backend', color: 'green' },\n+    { value: 'database', label: '🗄️ Database', color: 'red' },\n+    { value: 'devops', label: '🚀 DevOps', color: 'orange' },\n+    { value: 'mobile', label: '📱 Mobile', color: 'purple' },\n+    { value: 'docs', label: '📚 Documentation', color: 'cyan' },\n+    { value: 'general', label: '🔧 General', color: 'gray' }\n+  ];\n+\n+  const riskLevels = [\n+    { value: 'low', label: '🟢 Low Risk', color: 'green' },\n+    { value: 'medium', label: '🟡 Medium Risk', color: 'orange' },\n+    { value: 'high', label: '🔴 High Risk', color: 'red' }\n+  ];\n+\n+  const priorities = [\n+    { value: 'LOW', label: 'Low', color: 'gray' },\n+    { value: 'MEDIUM', label: 'Medium', color: 'blue' },\n+    { value: 'HIGH', label: 'High', color: 'orange' },\n+    { value: 'URGENT', label: 'Urgent', color: 'red' }\n+  ];\n+\n+  useEffect(() => {\n+    if (repositoryId) {\n+      loadMemberSkills();\n+      loadTeamInsights();\n+    }\n+  }, [repositoryId]);\n+\n+  const loadMemberSkills = async () => {\n+    try {\n+      setLoading(true);\n+      const response = await assignmentRecommendationAPI.getMemberSkills(repositoryId);\n+      setMemberSkills(response.data);\n+    } catch (error) {\n+      console.error('Error loading member skills:', error);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const loadTeamInsights = async () => {\n+    try {\n+      const response = await assignmentRecommendationAPI.getTeamInsights(repositoryId);\n+      setTeamInsights(response.data);\n+    } catch (error) {\n+      console.error('Error loading team insights:', error);\n+    }\n+  };\n+\n+  const handleGetRecommendations = async (values) => {\n+    try {\n+      setLoading(true);\n+      const response = await assignmentRecommendationAPI.getRecommendations(repositoryId, {\n+        task_type: values.taskType,\n+        task_area: values.taskArea,\n+        risk_level: values.riskLevel,\n+        priority: values.priority,\n+        required_skills: values.requiredSkills ? values.requiredSkills.split(',').map(s => s.trim()) : null\n+      });\n+      setRecommendations(response.data);\n+      setModalVisible(false);\n+    } catch (error) {\n+      console.error('Error getting recommendations:', error);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const getRiskToleranceColor = (tolerance) => {\n+    switch (tolerance) {\n+      case 'high': return 'red';\n+      case 'medium': return 'orange';\n+      case 'low': return 'green';\n+      default: return 'gray';\n+    }\n+  };\n+\n+  const getScoreColor = (score) => {\n+    if (score >= 80) return '#52c41a';\n+    if (score >= 60) return '#faad14';\n+    if (score >= 40) return '#fa8c16';\n+    return '#f5222d';\n+  };\n+\n+  return (\n+    <div className=\"assignment-recommendation\">\n+      <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n+        <h3><TeamOutlined /> Đề xuất phân công thành viên</h3>\n+        <Button type=\"primary\" onClick={() => setModalVisible(true)}>\n+          Tìm người phù hợp\n+        </Button>\n+      </div>\n+\n+      {/* Team Insights */}\n+      {teamInsights && (\n+        <Card title={<><TrophyOutlined /> Team Insights</>} style={{ marginBottom: 16 }}>\n+          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 16 }}>\n+            <div>\n+              <div style={{ fontSize: 24, fontWeight: 'bold', color: '#1890ff' }}>\n+                {teamInsights.team_size}\n+              </div>\n+              <div style={{ color: '#666' }}>Active Members</div>\n+            </div>\n+            <div>\n+              <div style={{ fontSize: 24, fontWeight: 'bold', color: '#52c41a' }}>\n+                {teamInsights.total_commits_analyzed}\n+              </div>\n+              <div style={{ color: '#666' }}>Total Commits</div>\n+            </div>\n+            <div>\n+              <div style={{ fontSize: 24, fontWeight: 'bold', color: '#faad14' }}>\n+                {teamInsights.area_coverage.covered_areas.length}\n+              </div>\n+              <div style={{ color: '#666' }}>Coverage Areas</div>\n+            </div>\n+            <div>\n+              <div style={{ fontSize: 24, fontWeight: 'bold', color: '#fa541c' }}>\n+                {teamInsights.workload_summary.members_with_active_tasks}\n+              </div>\n+              <div style={{ color: '#666' }}>Members with Tasks</div>\n+            </div>\n+          </div>\n+\n+          <div style={{ marginTop: 16 }}>\n+            <h4>Risk Tolerance Distribution:</h4>\n+            <div style={{ display: 'flex', gap: 8 }}>\n+              {Object.entries(teamInsights.risk_tolerance_distribution).map(([risk, count]) => (\n+                <Tag key={risk} color={getRiskToleranceColor(risk)}>\n+                  {risk.toUpperCase()}: {count}\n+                </Tag>\n+              ))}\n+            </div>\n+          </div>\n+\n+          <div style={{ marginTop: 16 }}>\n+            <h4>Area Experts:</h4>\n+            <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\n+              {Object.entries(teamInsights.area_coverage.area_experts).map(([area, experts]) => (\n+                <Tooltip key={area} title={`Experts: ${experts.join(', ')}`}>\n+                  <Tag color=\"blue\">{area} ({experts.length})</Tag>\n+                </Tooltip>\n+              ))}\n+            </div>\n+          </div>\n+        </Card>\n+      )}\n+\n+      {/* Member Skills */}\n+      <Card title={<><UserOutlined /> Member Skills Analysis</>} style={{ marginBottom: 16 }}>\n+        <List\n+          loading={loading}\n+          dataSource={memberSkills}\n+          renderItem={member => (\n+            <List.Item>\n+              <List.Item.Meta\n+                avatar={<Avatar icon={<UserOutlined />} />}\n+                title={\n+                  <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n+                    <span>{member.member}</span>\n+                    <Tag color={getRiskToleranceColor(member.risk_tolerance)}>\n+                      {member.risk_tolerance.toUpperCase()} RISK\n+                    </Tag>\n+                    <Tag color=\"blue\">{member.total_commits} commits</Tag>\n+                  </div>\n+                }\n+                description={\n+                  <div>\n+                    <div style={{ marginBottom: 4 }}>\n+                      <strong>Expertise:</strong> {member.expertise_areas.join(', ') || 'General'}\n+                    </div>\n+                    <div style={{ marginBottom: 4 }}>\n+                      <strong>Top Types:</strong> {Object.entries(member.top_commit_types).slice(0, 3).map(([type, count]) => (\n+                        <Tag key={type} size=\"small\">{type}: {count}</Tag>\n+                      ))}\n+                    </div>\n+                    <div>\n+                      <strong>Activity Score:</strong> \n+                      <span style={{ color: member.recent_activity_score > 5 ? '#52c41a' : '#faad14', marginLeft: 4 }}>\n+                        {member.recent_activity_score}\n+                      </span>\n+                    </div>\n+                  </div>\n+                }\n+              />\n+            </List.Item>\n+          )}\n+        />\n+      </Card>\n+\n+      {/* Recommendations */}\n+      {recommendations.length > 0 && (\n+        <Card title={<><ThunderboltOutlined /> Đề xuất phân công</>}>\n+          <List\n+            dataSource={recommendations}\n+            renderItem={(rec, index) => (\n+              <List.Item\n+                actions={[\n+                  <Button \n+                    type=\"primary\" \n+                    size=\"small\"\n+                    onClick={() => onAssign && onAssign(rec.member)}\n+                  >\n+                    Assign\n+                  </Button>\n+                ]}\n+              >\n+                <List.Item.Meta\n+                  avatar={\n+                    <Avatar \n+                      style={{ \n+                        backgroundColor: getScoreColor(rec.adjusted_score || rec.score),\n+                        fontSize: '12px'\n+                      }}\n+                    >\n+                      #{index + 1}\n+                    </Avatar>\n+                  }\n+                  title={\n+                    <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n+                      <span>{rec.member}</span>\n+                      <Tag color=\"green\">\n+                        Score: {Math.round(rec.adjusted_score || rec.score)}\n+                      </Tag>\n+                      {rec.workload_info && (\n+                        <Tag color=\"orange\">\n+                          {rec.workload_info.active_tasks} active tasks\n+                        </Tag>\n+                      )}\n+                    </div>\n+                  }\n+                  description={\n+                    <div>\n+                      <div style={{ marginBottom: 8 }}>{rec.explanation}</div>\n+                      <div style={{ fontSize: '12px', color: '#666' }}>\n+                        Total commits: {rec.profile_summary.total_commits} | \n+                        Risk tolerance: {rec.profile_summary.risk_tolerance} | \n+                        Activity: {rec.profile_summary.recent_activity_score}\n+                      </div>\n+                    </div>\n+                  }\n+                />\n+              </List.Item>\n+            )}\n+          />\n+        </Card>\n+      )}\n+\n+      {/* Recommendation Modal */}\n+      <Modal\n+        title=\"Tìm người phù hợp cho task\"\n+        open={modalVisible}\n+        onCancel={() => setModalVisible(false)}\n+        footer={null}\n+        width={600}\n+      >\n+        <Form\n+          form={form}\n+          layout=\"vertical\"\n+          onFinish={handleGetRecommendations}\n+        >\n+          <Form.Item\n+            name=\"taskType\"\n+            label=\"Loại task\"\n+            rules={[{ required: true, message: 'Vui lòng chọn loại task' }]}\n+          >\n+            <Select placeholder=\"Chọn loại task\">\n+              {taskTypes.map(type => (\n+                <Option key={type.value} value={type.value}>\n+                  <Tag color={type.color}>{type.label}</Tag>\n+                </Option>\n+              ))}\n+            </Select>\n+          </Form.Item>\n+\n+          <Form.Item\n+            name=\"taskArea\"\n+            label=\"Phạm vi công việc\"\n+            rules={[{ required: true, message: 'Vui lòng chọn phạm vi' }]}\n+          >\n+            <Select placeholder=\"Chọn phạm vi công việc\">\n+              {taskAreas.map(area => (\n+                <Option key={area.value} value={area.value}>\n+                  <Tag color={area.color}>{area.label}</Tag>\n+                </Option>\n+              ))}\n+            </Select>\n+          </Form.Item>\n+\n+          <Form.Item\n+            name=\"riskLevel\"\n+            label=\"Mức độ rủi ro\"\n+            rules={[{ required: true, message: 'Vui lòng chọn mức độ rủi ro' }]}\n+          >\n+            <Select placeholder=\"Chọn mức độ rủi ro\">\n+              {riskLevels.map(risk => (\n+                <Option key={risk.value} value={risk.value}>\n+                  <Tag color={risk.color}>{risk.label}</Tag>\n+                </Option>\n+              ))}\n+            </Select>\n+          </Form.Item>\n+\n+          <Form.Item\n+            name=\"priority\"\n+            label=\"Độ ưu tiên\"\n+            initialValue=\"MEDIUM\"\n+          >\n+            <Select>\n+              {priorities.map(priority => (\n+                <Option key={priority.value} value={priority.value}>\n+                  <Tag color={priority.color}>{priority.label}</Tag>\n+                </Option>\n+              ))}\n+            </Select>\n+          </Form.Item>\n+\n+          <Form.Item\n+            name=\"requiredSkills\"\n+            label=\"Kỹ năng yêu cầu (optional)\"\n+            help=\"Nhập các kỹ năng cách nhau bằng dấu phẩy. VD: Python, JavaScript, React\"\n+          >\n+            <Input placeholder=\"Python, JavaScript, React...\" />\n+          </Form.Item>\n+\n+          <Form.Item>\n+            <div style={{ display: 'flex', gap: 8, justifyContent: 'flex-end' }}>\n+              <Button onClick={() => setModalVisible(false)}>\n+                Hủy\n+              </Button>\n+              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n+                Tìm đề xuất\n+              </Button>\n+            </div>\n+          </Form.Item>\n+        </Form>\n+      </Modal>\n+    </div>\n+  );\n+};\n+\n+export default AssignmentRecommendation;\n@@ -5,7 +5,7 @@ import {\n } from 'antd';\n import { \n   AppstoreOutlined, UnorderedListOutlined, PlusOutlined,\n-  ReloadOutlined, TeamOutlined \n+  ReloadOutlined, TeamOutlined, RobotOutlined\n } from '@ant-design/icons';\n import styled from 'styled-components';\n import dayjs from 'dayjs';\n@@ -23,6 +23,7 @@ import TaskList from './ProjectTaskManager/TaskList';\n import TaskModal from './ProjectTaskManager/TaskModal';\n import KanbanBoard from './ProjectTaskManager/KanbanBoard';\n import RepositoryMembers from './RepositoryMembers';\n+import AssignmentRecommendation from './ProjectTaskManager/AssignmentRecommendation';\n \n const { Title } = Typography;\n \n@@ -56,6 +57,7 @@ const ProjectTaskManager = ({ repositories, repoLoading }) => {\n   const [form] = Form.useForm();\n   const [viewMode, setViewMode] = useState(true); // true = Kanban, false = List\n   const [activeTab, setActiveTab] = useState('tasks'); // 'tasks' or 'members'\n+  const [showAIInsights, setShowAIInsights] = useState(false);\n   \n   // Filter states\n   const [searchText, setSearchText] = useState('');\n@@ -169,6 +171,21 @@ const ProjectTaskManager = ({ repositories, repoLoading }) => {\n             </Button>\n           </Space.Compact>\n \n+          {/* AI Insights Button */}\n+          <Button\n+            icon={<RobotOutlined />}\n+            onClick={() => setShowAIInsights(true)}\n+            disabled={!selectedRepo}\n+            style={{ \n+              borderRadius: 6,\n+              background: 'linear-gradient(135deg, #fa8c16 0%, #faad14 100%)',\n+              border: 'none',\n+              color: 'white'\n+            }}\n+          >\n+            🤖 AI Insights\n+          </Button>\n+\n           {/* Task View Mode (only show when on tasks tab) */}\n           {activeTab === 'tasks' && (\n             <Space.Compact>\n@@ -307,7 +324,19 @@ const ProjectTaskManager = ({ repositories, repoLoading }) => {\n         handleTaskSubmit={handleTaskSubmit}\n         setIsModalVisible={setIsModalVisible}\n         collaborators={collaborators}\n+        selectedRepo={selectedRepo}\n       />\n+\n+      {/* AI Assignment Recommendation Modal */}\n+      {selectedRepo && (\n+        <AssignmentRecommendation\n+          selectedRepo={selectedRepo}\n+          isVisible={showAIInsights}\n+          onClose={() => setShowAIInsights(false)}\n+          onSelectAssignee={() => {}} // Not used in insights mode\n+          currentTaskData={null}\n+        />\n+      )}\n     </Card>\n   );\n };\n@@ -0,0 +1,602 @@\n+import React, { useState, useEffect } from 'react';\n+import { \n+  Card, Button, Space, Modal, List, Avatar, Tag, Typography, \n+  Spin, Alert, Tooltip, Progress, Collapse, Row, Col, Divider,\n+  Input, Select, Form, message\n+} from 'antd';\n+import { \n+  RobotOutlined, TeamOutlined, BulbOutlined, BarChartOutlined,\n+  UserOutlined, TrophyOutlined, WarningOutlined, CheckCircleOutlined,\n+  StarOutlined, FireOutlined, ThunderboltOutlined\n+} from '@ant-design/icons';\n+import { assignmentRecommendationAPI } from '../../../services/api';\n+import { getAvatarUrl } from '../../../utils/taskUtils.jsx';\n+\n+const { Title, Text, Paragraph } = Typography;\n+const { Panel } = Collapse;\n+const { TextArea } = Input;\n+const { Option } = Select;\n+\n+const AssignmentRecommendation = ({ \n+  selectedRepo, \n+  isVisible, \n+  onClose, \n+  onSelectAssignee,\n+  currentTaskData = null \n+}) => {\n+  const [loading, setLoading] = useState(false);\n+  const [teamInsights, setTeamInsights] = useState(null);\n+  const [memberSkills, setMemberSkills] = useState([]);\n+  const [recommendations, setRecommendations] = useState([]);\n+  const [taskDescription, setTaskDescription] = useState(currentTaskData?.description || '');\n+  const [requiredSkills, setRequiredSkills] = useState([]);\n+  const [activeTab, setActiveTab] = useState('insights'); // 'insights', 'recommend'\n+\n+  // Available skills for selection\n+  const availableSkills = [\n+    'JavaScript', 'Python', 'React', 'Node.js', 'Database', 'API', 'Frontend', 'Backend',\n+    'Testing', 'DevOps', 'UI/UX', 'Documentation', 'Bug Fix', 'Feature', 'Refactoring',\n+    'Security', 'Performance', 'Mobile', 'Web Development', 'Data Analysis'\n+  ];\n+\n+  useEffect(() => {\n+    if (isVisible && selectedRepo) {\n+      loadTeamInsights();\n+      loadMemberSkills();\n+    }\n+  }, [isVisible, selectedRepo]);\n+\n+  useEffect(() => {\n+    if (currentTaskData) {\n+      setTaskDescription(currentTaskData.description || currentTaskData.title || '');\n+    }\n+  }, [currentTaskData]);\n+\n+  const loadTeamInsights = async () => {\n+    try {\n+      setLoading(true);\n+      const insights = await assignmentRecommendationAPI.getTeamInsights(\n+        selectedRepo.owner.login, \n+        selectedRepo.name\n+      );\n+      setTeamInsights(insights);\n+    } catch (error) {\n+      console.error('Error loading team insights:', error);\n+      message.error('Không thể tải thông tin team');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const loadMemberSkills = async () => {\n+    try {\n+      const skills = await assignmentRecommendationAPI.getMemberSkills(\n+        selectedRepo.owner.login, \n+        selectedRepo.name\n+      );\n+      setMemberSkills(skills.members || []);\n+    } catch (error) {\n+      console.error('Error loading member skills:', error);\n+      message.error('Không thể tải kỹ năng thành viên');\n+    }\n+  };\n+\n+  const getRecommendations = async () => {\n+    if (!taskDescription.trim()) {\n+      message.warning('Vui lòng nhập mô tả task');\n+      return;\n+    }\n+\n+    try {\n+      setLoading(true);\n+      const result = await assignmentRecommendationAPI.getSmartAssignment(\n+        selectedRepo.owner.login,\n+        selectedRepo.name,\n+        taskDescription,\n+        requiredSkills,\n+        true // consider workload\n+      );\n+      setRecommendations(result.recommendations || []);\n+      setActiveTab('recommend');\n+    } catch (error) {\n+      console.error('Error getting recommendations:', error);\n+      message.error('Không thể lấy gợi ý phân công');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const getSkillColor = (skill) => {\n+    const colors = {\n+      'JavaScript': 'gold',\n+      'Python': 'blue',\n+      'React': 'cyan',\n+      'Node.js': 'green',\n+      'Database': 'purple',\n+      'API': 'orange',\n+      'Frontend': 'magenta',\n+      'Backend': 'volcano',\n+      'Testing': 'lime',\n+      'DevOps': 'red'\n+    };\n+    return colors[skill] || 'default';\n+  };\n+\n+  const getSkillIcon = (skill) => {\n+    const icons = {\n+      'JavaScript': '⚡',\n+      'Python': '🐍',\n+      'React': '⚛️',\n+      'Database': '🗄️',\n+      'API': '🔌',\n+      'Frontend': '🎨',\n+      'Backend': '⚙️',\n+      'Testing': '🧪',\n+      'Bug Fix': '🐛',\n+      'Feature': '✨'\n+    };\n+    return icons[skill] || '💡';\n+  };\n+\n+  const renderTeamInsights = () => {\n+    if (loading) return <Spin size=\"large\" />;\n+    if (!teamInsights) return <Alert message=\"Không có dữ liệu team insights\" type=\"info\" />;\n+\n+    return (\n+      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n+        {/* Team Overview */}\n+        <Card size=\"small\" title=\"📊 Tổng quan Team (AI-Enhanced)\">\n+          <Row gutter={16}>\n+            <Col span={5}>\n+              <div style={{ textAlign: 'center' }}>\n+                <Title level={3} style={{ margin: 0, color: '#1890ff' }}>\n+                  {teamInsights.total_members || 0}\n+                </Title>\n+                <Text type=\"secondary\">Thành viên</Text>\n+              </div>\n+            </Col>\n+            <Col span={5}>\n+              <div style={{ textAlign: 'center' }}>\n+                <Title level={3} style={{ margin: 0, color: '#52c41a' }}>\n+                  {teamInsights.active_members || 0}\n+                </Title>\n+                <Text type=\"secondary\">Hoạt động</Text>\n+              </div>\n+            </Col>\n+            <Col span={5}>\n+              <div style={{ textAlign: 'center' }}>\n+                <Title level={3} style={{ margin: 0, color: '#fa8c16' }}>\n+                  {teamInsights.avg_commits_per_member?.toFixed(1) || 0}\n+                </Title>\n+                <Text type=\"secondary\">Commit TB</Text>\n+              </div>\n+            </Col>\n+            <Col span={5}>\n+              <div style={{ textAlign: 'center' }}>\n+                <Title level={3} style={{ margin: 0, color: '#722ed1' }}>\n+                  {teamInsights.total_skills || 0}\n+                </Title>\n+                <Text type=\"secondary\">Kỹ năng</Text>\n+              </div>\n+            </Col>\n+            <Col span={4}>\n+              <div style={{ textAlign: 'center' }}>\n+                <Title level={3} style={{ margin: 0, color: '#eb2f96' }}>\n+                  🤖\n+                </Title>\n+                <Text type=\"secondary\">AI-Powered</Text>\n+              </div>\n+            </Col>\n+          </Row>\n+          \n+          {/* AI Analysis Summary */}\n+          {teamInsights.ai_analysis_summary && (\n+            <div style={{ marginTop: 16, padding: 12, backgroundColor: '#f6ffed', borderRadius: 4 }}>\n+              <Text strong style={{ color: '#52c41a' }}>🤖 AI Analysis Summary:</Text>\n+              <div style={{ marginTop: 8 }}>\n+                <Row gutter={16}>\n+                  <Col span={8}>\n+                    <Text type=\"secondary\">\n+                      AI Coverage: {(teamInsights.ai_analysis_summary.avg_ai_coverage * 100).toFixed(0)}%\n+                    </Text>\n+                  </Col>\n+                  <Col span={8}>\n+                    <Text type=\"secondary\">\n+                      Models Used: {teamInsights.ai_analysis_summary.models_used?.join(', ') || 'MultiFusion V2, Area, Risk'}\n+                    </Text>\n+                  </Col>\n+                  <Col span={8}>\n+                    <Text type=\"secondary\">\n+                      AI Analyzed: {teamInsights.ai_analysis_summary.total_ai_commits || 0} commits\n+                    </Text>\n+                  </Col>\n+                </Row>\n+              </div>\n+            </div>\n+          )}\n+        </Card>\n+\n+        {/* Top Skills */}\n+        {teamInsights.top_skills && teamInsights.top_skills.length > 0 && (\n+          <Card size=\"small\" title=\"🏆 Kỹ năng hàng đầu\">\n+            <Space wrap>\n+              {teamInsights.top_skills.slice(0, 10).map((skill) => (\n+                <Tag \n+                  key={skill.skill} \n+                  color={getSkillColor(skill.skill)}\n+                  style={{ margin: '2px', padding: '4px 8px', fontSize: '12px' }}\n+                >\n+                  {getSkillIcon(skill.skill)} {skill.skill} ({skill.member_count})\n+                </Tag>\n+              ))}\n+            </Space>\n+          </Card>\n+        )}\n+\n+        {/* Member Skills List */}\n+        <Card size=\"small\" title=\"👥 Kỹ năng từng thành viên (AI-Enhanced)\">\n+          <List\n+            dataSource={memberSkills}\n+            renderItem={(member) => (\n+              <List.Item>\n+                <List.Item.Meta\n+                  avatar={<Avatar src={getAvatarUrl(member.avatar_url, member.username)} />}\n+                  title={\n+                    <Space>\n+                      <Text strong>{member.display_name || member.username}</Text>\n+                      <Tag color=\"blue\">{member.total_commits} commits</Tag>\n+                      <Tag color=\"green\">{member.skills?.length || 0} skills</Tag>\n+                      {/* AI Coverage indicator */}\n+                      {member.ai_coverage && (\n+                        <Tag color={member.ai_coverage > 0.5 ? \"gold\" : \"orange\"}>\n+                          🤖 AI: {(member.ai_coverage * 100).toFixed(0)}%\n+                        </Tag>\n+                      )}\n+                    </Space>\n+                  }\n+                  description={\n+                    <div>\n+                      <Space wrap style={{ marginBottom: 8 }}>\n+                        {member.skills?.slice(0, 8).map(skill => (\n+                          <Tag \n+                            key={skill.skill} \n+                            color={getSkillColor(skill.skill)}\n+                            style={{ fontSize: '11px' }}\n+                          >\n+                            {getSkillIcon(skill.skill)} {skill.skill} ({(skill.confidence || 0).toFixed(2)})\n+                          </Tag>\n+                        ))}\n+                        {member.skills?.length > 8 && (\n+                          <Text type=\"secondary\">+{member.skills.length - 8} more...</Text>\n+                        )}\n+                      </Space>\n+                      \n+                      {/* Show AI analysis results if available */}\n+                      {member.ai_predictions && (\n+                        <div style={{ marginTop: 8 }}>\n+                          <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n+                            🤖 AI Analysis: \n+                          </Text>\n+                          <div style={{ marginTop: 4 }}>\n+                            {/* Top AI-predicted commit types */}\n+                            {member.ai_predictions.commit_types && Object.entries(member.ai_predictions.commit_types)\n+                              .sort(([,a], [,b]) => b - a)\n+                              .slice(0, 3).map(([type, count]) => (\n+                              <Tag \n+                                key={`ai-type-${type}`}\n+                                color=\"purple\"\n+                                style={{ fontSize: '10px', margin: '1px' }}\n+                              >\n+                                {type}: {count}\n+                              </Tag>\n+                            ))}\n+                            \n+                            {/* Top AI-predicted areas */}\n+                            {member.ai_predictions.areas && Object.entries(member.ai_predictions.areas)\n+                              .sort(([,a], [,b]) => b - a)\n+                              .slice(0, 2).map(([area, count]) => (\n+                              <Tag \n+                                key={`ai-area-${area}`}\n+                                color=\"cyan\"\n+                                style={{ fontSize: '10px', margin: '1px' }}\n+                              >\n+                                {area}: {count}\n+                              </Tag>\n+                            ))}\n+                            \n+                            {/* Risk tolerance from AI */}\n+                            {member.risk_tolerance && (\n+                              <Tag \n+                                color={member.risk_tolerance === 'high' ? 'red' : member.risk_tolerance === 'medium' ? 'orange' : 'green'}\n+                                style={{ fontSize: '10px', margin: '1px' }}\n+                              >\n+                                Risk: {member.risk_tolerance}\n+                              </Tag>\n+                            )}\n+                          </div>\n+                        </div>\n+                      )}\n+                    </div>\n+                  }\n+                />\n+              </List.Item>\n+            )}\n+          />\n+        </Card>\n+      </Space>\n+    );\n+  };\n+\n+  const renderRecommendationForm = () => (\n+    <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n+      <Card size=\"small\" title=\"🤖 Tạo gợi ý phân công (AI-Enhanced)\">\n+        <Alert\n+          message=\"AI-Powered Assignment Recommendation\"\n+          description=\"Hệ thống sử dụng 3 AI models: MultiFusion V2 (commit type), Area Analyst (work scope), Risk Analyst (risk level) để phân tích và đề xuất phân công chính xác.\"\n+          type=\"info\"\n+          icon={<RobotOutlined />}\n+          style={{ marginBottom: 16 }}\n+          showIcon\n+        />\n+        <Form layout=\"vertical\">\n+          <Form.Item label=\"Mô tả task\" required>\n+            <TextArea\n+              value={taskDescription}\n+              onChange={(e) => setTaskDescription(e.target.value)}\n+              placeholder=\"Nhập mô tả chi tiết về task cần phân công...\"\n+              rows={4}\n+            />\n+          </Form.Item>\n+          \n+          <Form.Item label=\"Kỹ năng yêu cầu\">\n+            <Select\n+              mode=\"multiple\"\n+              placeholder=\"Chọn kỹ năng cần thiết...\"\n+              value={requiredSkills}\n+              onChange={setRequiredSkills}\n+              style={{ width: '100%' }}\n+            >\n+              {availableSkills.map(skill => (\n+                <Option key={skill} value={skill}>\n+                  {getSkillIcon(skill)} {skill}\n+                </Option>\n+              ))}\n+            </Select>\n+          </Form.Item>\n+\n+          <Form.Item>\n+            <Button \n+              type=\"primary\" \n+              icon={<RobotOutlined />}\n+              onClick={getRecommendations}\n+              loading={loading}\n+              size=\"large\"\n+              style={{ width: '100%' }}\n+            >\n+              🎯 Lấy gợi ý phân công\n+            </Button>\n+          </Form.Item>\n+        </Form>\n+      </Card>\n+\n+      {recommendations.length > 0 && (\n+        <Card size=\"small\" title=\"💡 Gợi ý phân công\">\n+          <List\n+            dataSource={recommendations}\n+            renderItem={(rec, index) => (\n+              <List.Item\n+                actions={[\n+                  <Button \n+                    type=\"primary\" \n+                    size=\"small\"\n+                    onClick={() => {\n+                      onSelectAssignee(rec.username);\n+                      message.success(`Đã chọn ${rec.display_name} cho task này`);\n+                      onClose();\n+                    }}\n+                  >\n+                    ✅ Chọn\n+                  </Button>\n+                ]}\n+              >\n+                <List.Item.Meta\n+                  avatar={\n+                    <div style={{ position: 'relative' }}>\n+                      <Avatar src={getAvatarUrl(rec.avatar_url, rec.username)} size=\"large\" />\n+                      <div style={{\n+                        position: 'absolute',\n+                        top: -5,\n+                        right: -5,\n+                        background: '#52c41a',\n+                        borderRadius: '50%',\n+                        padding: '2px 6px',\n+                        fontSize: '12px',\n+                        color: 'white',\n+                        fontWeight: 'bold'\n+                      }}>\n+                        #{index + 1}\n+                      </div>\n+                    </div>\n+                  }\n+                  title={\n+                    <Space direction=\"vertical\" size=\"small\">\n+                      <Space>\n+                        <Text strong style={{ fontSize: '16px' }}>\n+                          {rec.member || rec.display_name || rec.username}\n+                        </Text>\n+                        <Tag color=\"gold\">\n+                          <StarOutlined /> Score: {(rec.score || 0).toFixed(2)}\n+                        </Tag>\n+                      </Space>\n+                      <Space wrap>\n+                        <Tag color=\"blue\">\n+                          <ThunderboltOutlined /> {rec.profile_summary?.total_commits || rec.total_commits || 0} commits\n+                        </Tag>\n+                        {rec.adjusted_score && (\n+                          <Tag color=\"purple\">\n+                            Adjusted: {rec.adjusted_score.toFixed(2)}\n+                          </Tag>\n+                        )}\n+                        {rec.workload_info && (\n+                          <Tag color=\"orange\">\n+                            Workload: {rec.workload_info.workload_score?.toFixed(1) || 0}\n+                          </Tag>\n+                        )}\n+                        {/* Show AI coverage if available */}\n+                        {rec.profile_summary?.ai_coverage && (\n+                          <Tag color={rec.profile_summary.ai_coverage > 0.5 ? \"gold\" : \"orange\"}>\n+                            🤖 AI: {(rec.profile_summary.ai_coverage * 100).toFixed(0)}%\n+                          </Tag>\n+                        )}\n+                        {/* Show risk tolerance */}\n+                        {rec.profile_summary?.risk_tolerance && (\n+                          <Tag color={\n+                            rec.profile_summary.risk_tolerance === 'high' ? 'red' : \n+                            rec.profile_summary.risk_tolerance === 'medium' ? 'orange' : 'green'\n+                          }>\n+                            Risk: {rec.profile_summary.risk_tolerance}\n+                          </Tag>\n+                        )}\n+                      </Space>\n+                    </Space>\n+                  }\n+                  description={\n+                    <div>\n+                      <Paragraph ellipsis={{ rows: 2, expandable: true }}>\n+                        <Text type=\"secondary\">{rec.explanation || rec.reason || 'No explanation available'}</Text>\n+                      </Paragraph>\n+                      <Space wrap style={{ marginTop: 8 }}>\n+                        {/* Show expertise areas from profile_summary */}\n+                        {rec.profile_summary?.expertise_areas?.slice(0, 4).map((area, idx) => (\n+                          <Tag \n+                            key={`${area}-${idx}`}\n+                            color=\"blue\"\n+                            style={{ fontSize: '11px' }}\n+                          >\n+                            {getSkillIcon(area)} {area}\n+                          </Tag>\n+                        ))}\n+                        \n+                        {/* Show top commit types from AI analysis */}\n+                        {rec.profile_summary?.top_commit_types && Object.entries(rec.profile_summary.top_commit_types)\n+                          .slice(0, 3).map(([type, count]) => (\n+                          <Tag \n+                            key={type}\n+                            color=\"green\"\n+                            style={{ fontSize: '11px' }}\n+                          >\n+                            {type}: {count}\n+                          </Tag>\n+                        ))}\n+                        \n+                        {/* Show AI predictions if available */}\n+                        {rec.profile_summary?.ai_predictions && (\n+                          <div style={{ marginTop: 4, width: '100%' }}>\n+                            <Text type=\"secondary\" style={{ fontSize: '10px' }}>🤖 AI Analysis:</Text>\n+                            <div style={{ marginTop: 2 }}>\n+                              {/* AI Commit Types */}\n+                              {rec.profile_summary.ai_predictions.commit_types && \n+                                Object.entries(rec.profile_summary.ai_predictions.commit_types)\n+                                  .sort(([,a], [,b]) => b - a)\n+                                  .slice(0, 2).map(([type, count]) => (\n+                                  <Tag \n+                                    key={`ai-${type}`}\n+                                    color=\"purple\"\n+                                    style={{ fontSize: '10px', margin: '1px' }}\n+                                  >\n+                                    {type}: {count}\n+                                  </Tag>\n+                                ))}\n+                              \n+                              {/* AI Areas */}\n+                              {rec.profile_summary.ai_predictions.areas && \n+                                Object.entries(rec.profile_summary.ai_predictions.areas)\n+                                  .sort(([,a], [,b]) => b - a)\n+                                  .slice(0, 2).map(([area, count]) => (\n+                                  <Tag \n+                                    key={`ai-area-${area}`}\n+                                    color=\"cyan\"\n+                                    style={{ fontSize: '10px', margin: '1px' }}\n+                                  >\n+                                    {area}: {count}\n+                                  </Tag>\n+                                ))}\n+                              \n+                              {/* AI Risk Analysis */}\n+                              {rec.profile_summary.ai_predictions.risks && \n+                                Object.entries(rec.profile_summary.ai_predictions.risks)\n+                                  .sort(([,a], [,b]) => b - a)\n+                                  .slice(0, 2).map(([risk, count]) => (\n+                                  <Tag \n+                                    key={`ai-risk-${risk}`}\n+                                    color={risk === 'highrisk' || risk === 'high' ? 'red' : 'green'}\n+                                    style={{ fontSize: '10px', margin: '1px' }}\n+                                  >\n+                                    {risk}: {count}\n+                                  </Tag>\n+                                ))}\n+                            </div>\n+                          </div>\n+                        )}\n+                        \n+                        {/* Fallback: show relevant_skills if available */}\n+                        {rec.relevant_skills?.slice(0, 6).map(skill => (\n+                          <Tag \n+                            key={skill.skill} \n+                            color={getSkillColor(skill.skill)}\n+                            style={{ fontSize: '11px' }}\n+                          >\n+                            {getSkillIcon(skill.skill)} {skill.skill} ({(skill.confidence || 0).toFixed(2)})\n+                          </Tag>\n+                        ))}\n+                      </Space>\n+                    </div>\n+                  }\n+                />\n+              </List.Item>\n+            )}\n+          />\n+        </Card>\n+      )}\n+    </Space>\n+  );\n+\n+  return (\n+    <Modal\n+      title={\n+        <Space>\n+          <RobotOutlined style={{ color: '#1890ff' }} />\n+          <span>🤖 AI Assignment Recommendation</span>\n+        </Space>\n+      }\n+      open={isVisible}\n+      onCancel={onClose}\n+      footer={null}\n+      width={900}\n+      style={{ top: 20 }}\n+    >\n+      <div style={{ marginBottom: 16 }}>\n+        <Space.Compact style={{ width: '100%' }}>\n+          <Button \n+            type={activeTab === 'insights' ? 'primary' : 'default'}\n+            onClick={() => setActiveTab('insights')}\n+            style={{ flex: 1 }}\n+          >\n+            📊 Team Insights\n+          </Button>\n+          <Button \n+            type={activeTab === 'recommend' ? 'primary' : 'default'}\n+            onClick={() => setActiveTab('recommend')}\n+            style={{ flex: 1 }}\n+          >\n+            🎯 Gợi ý phân công\n+          </Button>\n+        </Space.Compact>\n+      </div>\n+\n+      {activeTab === 'insights' ? renderTeamInsights() : renderRecommendationForm()}\n+    </Modal>\n+  );\n+};\n+\n+export default AssignmentRecommendation;\n@@ -1,13 +1,14 @@\n-import React from 'react';\n+import React, { useState } from 'react';\n import { \n   Modal, Form, Input, Select, DatePicker, Button, Space, Avatar, Tag, \n   Card, Divider, Typography, Row, Col \n } from 'antd';\n import { \n   UserOutlined, CalendarOutlined, FlagOutlined, \n-  FileTextOutlined, TeamOutlined \n+  FileTextOutlined, TeamOutlined, RobotOutlined \n } from '@ant-design/icons';\n import { getAvatarUrl } from '../../../utils/taskUtils.jsx';\n+import AssignmentRecommendation from './AssignmentRecommendation';\n \n import styles from './TaskModal.module.css';\n \n@@ -21,12 +22,31 @@ const TaskModal = ({\n   form,\n   handleTaskSubmit,\n   setIsModalVisible,\n-  collaborators\n+  collaborators,\n+  selectedRepo // Add selectedRepo prop for AI recommendations\n }) => {\n+  const [showAIRecommendation, setShowAIRecommendation] = useState(false);\n+  \n   console.log('🎯 TaskModal rendered with collaborators:', collaborators);\n   console.log('🎯 TaskModal collaborators type:', typeof collaborators);\n   console.log('🎯 TaskModal collaborators isArray:', Array.isArray(collaborators));\n \n+  // Handle AI recommendation selection\n+  const handleAIAssigneeSelect = (username) => {\n+    form.setFieldsValue({ assignee: username });\n+    setShowAIRecommendation(false);\n+  };\n+\n+  // Get current task data for AI recommendations\n+  const getCurrentTaskData = () => {\n+    const formValues = form.getFieldsValue();\n+    return {\n+      title: formValues.title || '',\n+      description: formValues.description || '',\n+      ...editingTask\n+    };\n+  };\n+\n   // Get current user and ensure they're in the assignee list\n   const getCurrentUser = () => {\n     try {\n@@ -135,6 +155,26 @@ const TaskModal = ({\n                   filterOption={(input, option) =>\n                     option.children.props.children[1].toLowerCase().includes(input.toLowerCase())\n                   }\n+                  dropdownRender={(menu) => (\n+                    <div>\n+                      {menu}\n+                      <Divider style={{ margin: '8px 0' }} />\n+                      <div style={{ padding: '8px' }}>\n+                        <Button\n+                          type=\"text\"\n+                          icon={<RobotOutlined />}\n+                          onClick={() => setShowAIRecommendation(true)}\n+                          style={{ \n+                            width: '100%',\n+                            color: '#1890ff',\n+                            fontWeight: 500\n+                          }}\n+                        >\n+                          🤖 AI Gợi ý phân công thông minh\n+                        </Button>\n+                      </div>\n+                    </div>\n+                  )}\n                 >\n                   {allAssignees.map((collab, index) => {\n                     const username = collab.login || collab.github_username;\n@@ -228,6 +268,17 @@ const TaskModal = ({\n           </Button>\n         </div>\n       </Form>\n+\n+      {/* AI Assignment Recommendation Modal */}\n+      {selectedRepo && (\n+        <AssignmentRecommendation\n+          selectedRepo={selectedRepo}\n+          isVisible={showAIRecommendation}\n+          onClose={() => setShowAIRecommendation(false)}\n+          onSelectAssignee={handleAIAssigneeSelect}\n+          currentTaskData={getCurrentTaskData()}\n+        />\n+      )}\n     </Modal>\n   );\n };\n@@ -241,4 +241,63 @@ export const branchAPI = {  // 🌿 Lấy branches từ database\n   }\n };\n \n+// ==================== ASSIGNMENT RECOMMENDATION API ====================\n+export const assignmentRecommendationAPI = {\n+  // 🎯 Lấy kỹ năng của các thành viên (simplified endpoint)\n+  getMemberSkills: async (owner, repoName) => {\n+    console.log(`🔍 Getting member skills for ${owner}/${repoName}`);\n+    const response = await apiClient.get(`/assignment-recommendation/member-skills-simple/${owner}/${repoName}`);\n+    console.log('🎯 Member skills response:', response.data);\n+    return response.data;\n+  },\n+\n+  // 🤖 Lấy gợi ý phân công cho task\n+  getRecommendations: async (owner, repoName, taskDescription, requiredSkills = [], maxRecommendations = 3) => {\n+    console.log(`🤖 Getting recommendations for task: \"${taskDescription}\"`);\n+    const response = await apiClient.post(`/assignment-recommendation/recommend/${owner}/${repoName}`, {\n+      task_description: taskDescription,\n+      required_skills: requiredSkills,\n+      max_recommendations: maxRecommendations\n+    });\n+    console.log('🤖 Recommendations response:', response.data);\n+    return response.data;\n+  },\n+\n+  // ⚖️ Phân công thông minh với cân bằng workload (simplified endpoint)\n+  getSmartAssignment: async (owner, repoName, taskDescription, requiredSkills = [], considerWorkload = true) => {\n+    console.log(`⚖️ Getting smart assignment for task: \"${taskDescription}\"`);\n+    const response = await apiClient.post(`/assignment-recommendation/smart-assign-simple/${owner}/${repoName}`, {\n+      task_description: taskDescription,\n+      required_skills: requiredSkills,\n+      consider_workload: considerWorkload\n+    });\n+    console.log('⚖️ Smart assignment response:', response.data);\n+    return response.data;\n+  },\n+\n+  // 📊 Lấy insights về team\n+  getTeamInsights: async (owner, repoName) => {\n+    console.log(`📊 Getting team insights for ${owner}/${repoName}`);\n+    const response = await apiClient.get(`/assignment-recommendation/team-insights/${owner}/${repoName}`);\n+    console.log('📊 Team insights response:', response.data);\n+    return response.data;\n+  },\n+\n+  // 📈 Lấy phân tích workload\n+  getWorkloadAnalysis: async (owner, repoName) => {\n+    console.log(`📈 Getting workload analysis for ${owner}/${repoName}`);\n+    const response = await apiClient.get(`/assignment-recommendation/workload-analysis/${owner}/${repoName}`);\n+    console.log('📈 Workload analysis response:', response.data);\n+    return response.data;\n+  },\n+\n+  // 🔍 Lấy chi tiết kỹ năng của một thành viên\n+  getMemberSkillDetails: async (owner, repoName, username) => {\n+    console.log(`🔍 Getting skill details for member: ${username}`);\n+    const response = await apiClient.get(`/assignment-recommendation/member-skills/${owner}/${repoName}/${username}`);\n+    console.log('🔍 Member skill details response:', response.data);\n+    return response.data;\n+  }\n+};\n+\n export default apiClient;",
  "file_types": "{\".py\": 6, \".jsx\": 4, \".js\": 1}",
  "num_dirs_changed": 7,
  "num_py_files": 12,
  "num_jsx_files": 8,
  "num_js_files": 2,
  "num_build_files": 0,
  "num_test_files": 1,
  "num_doc_files": 0,
  "sha_short": "6414fdcb",
  "date": "2025-07-26T01:11:14",
  "analysis": {
    "type": "chore",
    "confidence": 0.7,
    "ai_powered": true,
    "ai_model": "MultiFusionV2"
  }
}

--- Mẫu cuối cùng ---
{
  "id": 620,
  "sha": "91c59eb82ad79d27ef8519f347139e7c1e75efbd",
  "message": "Feat: Implement Area Analysis API and service for commit area prediction",
  "author_name": "San",
  "committer_date": "2025-07-21T16:13:09",
  "branch_name": "CommitAnalyst",
  "insertions": 505,
  "deletions": 434,
  "files_changed": "[\"backend/api/routes/area_analysis.py\", \"backend/api/routes/commit.py\", \"backend/api/routes/commit_routes.py\", \"backend/core/logger.py\", \"backend/main.py\", \"backend/sample.jsonl\", \"backend/schemas/commit.py\", \"backend/services/area_analysis_service.py\", \"backend/services/commit_service.py\", \"frontend/src/components/Branchs/BranchSelector.jsx\", \"frontend/src/components/Branchs/BranchSelector_fixed.jsx\", \"frontend/src/components/commits/AnalyzeGitHubCommits.jsx\", \"test_diff_sync.py\"]",
  "diff_content": "@@ -0,0 +1,31 @@\n+from fastapi import APIRouter, HTTPException\n+from typing import Dict, Any\n+from services.area_analysis_service import AreaAnalysisService\n+from schemas.commit import CommitAreaAnalysisRequest\n+import logging\n+\n+logger = logging.getLogger(__name__)\n+\n+area_analysis_router = APIRouter(prefix=\"/api/area-analysis\", tags=[\"Area Analysis\"])\n+\n+# Initialize AreaAnalysisService\n+area_analysis_service = AreaAnalysisService()\n+\n+@area_analysis_router.post(\"/predict\")\n+async def predict_commit_area(commit_data: CommitAreaAnalysisRequest) -> Dict[str, str]:\n+    \"\"\"\n+    Phân tích phạm vi công việc (dev area) của một commit dựa trên message và diff.\n+    \n+    Args:\n+        commit_data (CommitAreaAnalysisRequest): Dữ liệu commit bao gồm commit_message, diff_content,\n+                                                files_count, lines_added, lines_removed, total_changes.\n+    \n+    Returns:\n+        Dict[str, str]: Kết quả phân tích với dev_area được dự đoán.\n+    \"\"\"\n+    try:\n+        predicted_area = area_analysis_service.predict_area(commit_data.dict())\n+        return {\"dev_area\": predicted_area}\n+    except Exception as e:\n+        logger.error(f\"Error analyzing commit area: {e}\")\n+        raise HTTPException(status_code=500, detail=f\"Failed to analyze commit area: {str(e)}\")\n@@ -28,16 +28,19 @@\n - Use SYNC endpoints to populate/update database from GitHub\n - Use ANALYTICS endpoints for insights and statistics\n \"\"\"\n-from fastapi import APIRouter, Request, HTTPException, Query\n+from fastapi import APIRouter, HTTPException, Depends, Query, BackgroundTasks, status, Request\n+from fastapi.responses import JSONResponse\n import httpx\n import asyncio\n import logging\n from typing import Optional, List, Dict, Any\n from datetime import datetime\n from services.commit_service import (\n-    save_commit, save_multiple_commits, get_commits_by_repo_id, \n-    get_commit_by_sha, get_commit_statistics\n+    get_commit_by_sha, save_commit, get_commits_by_branch_safe, \n+    get_commits_by_repo_id, get_commit_statistics, \n+    get_enhanced_commit_statistics, analyze_commit_trends\n )\n+from core.security import security # Import security dependency\n from services.repo_service import get_repo_id_by_owner_and_name, get_repository\n from services.branch_service import get_branches_by_repo_id\n from services.github_service import fetch_commits, fetch_commit_details\n@@ -66,6 +69,27 @@ async def github_api_call(url: str, token: str, params: dict = None):\n         \n         return response.json()\n \n+async def fetch_raw_github_content(url: str, token: str):\n+    \"\"\"Helper function to fetch raw content (e.g., diffs) from GitHub API.\"\"\"\n+    headers = {\n+        \"Authorization\": token,\n+        \"Accept\": \"application/vnd.github.v3.diff\", # Yêu cầu định dạng diff\n+        \"X-GitHub-Api-Version\": \"2022-11-28\"\n+    }\n+    async with httpx.AsyncClient(timeout=60.0) as client:\n+        response = await client.get(url, headers=headers)\n+        \n+        if response.status_code == 429:\n+            raise HTTPException(status_code=429, detail=\"GitHub API rate limit exceeded\")\n+        elif response.status_code != 200:\n+            logger.error(f\"GitHub API error fetching raw content from {url}. Status: {response.status_code}, Detail: {response.text}\")\n+            raise HTTPException(\n+                status_code=response.status_code,\n+                detail=f\"GitHub API error fetching raw content: {response.text}\"\n+            )\n+        \n+        return response.text # Trả về văn bản thuần túy\n+\n # ==================== NEW BRANCH-SPECIFIC COMMIT ENDPOINTS ====================\n \n @commit_router.get(\"/commits/{owner}/{repo}/branches/{branch_name}/commits\")\n@@ -116,7 +140,8 @@ async def get_branch_commits(\n                 \"is_merge\": commit.is_merge,\n                 \"merge_from_branch\": commit.merge_from_branch,\n                 \"branch_name\": commit.branch_name,\n-                \"author_role_at_commit\": commit.author_role_at_commit\n+                \"author_role_at_commit\": commit.author_role_at_commit,\n+                \"diff_content\": commit.diff_content\n             }\n             commits_list.append(commit_dict)\n         \n@@ -218,7 +243,8 @@ async def compare_branch_commits(\n                 \"insertions\": commit.insertions,\n                 \"deletions\": commit.deletions,\n                 \"files_changed\": commit.files_changed,\n-                \"is_merge\": commit.is_merge\n+                \"is_merge\": commit.is_merge,\n+                \"diff_content\": commit.diff_content\n             }\n             commits_list.append(commit_dict)\n         \n@@ -602,7 +628,8 @@ async def get_repository_commits_from_database(\n                 \"insertions\": commit.insertions,\n                 \"deletions\": commit.deletions,\n                 \"files_changed\": commit.files_changed,\n-                \"is_merge\": commit.is_merge\n+                \"is_merge\": commit.is_merge,\n+                \"diff_content\": commit.diff_content\n             }\n             commits_list.append(commit_dict)\n         \n@@ -854,6 +881,7 @@ async def sync_branch_commits_enhanced(\n     per_page: int = Query(100, ge=1, le=100, description=\"Number of commits per page\"),\n     max_pages: int = Query(10, ge=1, le=50, description=\"Maximum pages to fetch\"),\n     include_stats: bool = Query(True, description=\"Include detailed commit statistics\"),\n+    include_diff: bool = Query(False, description=\"Include commit diff content (slower)\"),\n     force_update: bool = Query(True, description=\"Force update existing commits with new data\")\n ):\n     \"\"\"\n@@ -940,8 +968,8 @@ async def sync_branch_commits_enhanced(\n                 break\n             \n             # Enhance commits with detailed stats if requested\n-            if include_stats:\n-                logger.info(f\"Enhancing {len(commits_data)} commits with detailed stats...\")\n+            if include_stats or include_diff:\n+                logger.info(f\"Enhancing {len(commits_data)} commits with detailed stats/diff...\")\n                 for commit in commits_data:\n                     sha = commit.get(\"sha\")\n                     if sha:\n@@ -951,8 +979,59 @@ async def sync_branch_commits_enhanced(\n                             detailed_commit = await github_api_call(detail_url, token)\n                             \n                             if detailed_commit:\n-                                commit[\"stats\"] = detailed_commit.get(\"stats\", {})\n-                                commit[\"files\"] = detailed_commit.get(\"files\", [])\n+                                if include_stats:\n+                                    commit[\"stats\"] = detailed_commit.get(\"stats\", {})\n+                                    commit[\"files\"] = detailed_commit.get(\"files\", [])\n+                                \n+                                if include_diff:\n+                                    full_diff_content = None\n+                                    # Ưu tiên: Lấy diff bằng GitHub Compare API (so sánh với commit cha)\n+                                    parents = commit.get(\"parents\")\n+                                    parent_sha = parents[0].get(\"sha\") if parents and len(parents) > 0 else None\n+\n+                                    if parent_sha:\n+                                        compare_url = f\"https://api.github.com/repos/{owner}/{repo}/compare/{parent_sha}...{sha}\"\n+                                        try:\n+                                            compare_response = await github_api_call(compare_url, token)\n+                                            # Compare API trả về JSON, trường 'patch' chứa diff\n+                                            if compare_response and compare_response.get(\"files\"):\n+                                                compare_diff_lines = []\n+                                                for file_data in compare_response[\"files\"]:\n+                                                    if file_data.get(\"patch\"):\n+                                                        compare_diff_lines.append(file_data[\"patch\"])\n+                                                full_diff_content = \"\\n\".join(compare_diff_lines)\n+                                                logger.debug(f\"Successfully fetched diff via Compare API for {sha}. Length: {len(full_diff_content) if full_diff_content else 0}\")\n+                                            else:\n+                                                logger.debug(f\"Compare API returned no files or patch for {sha}\")\n+                                        except Exception as compare_e:\n+                                            logger.warning(f\"Could not fetch diff via Compare API for {sha}: {compare_e}. Falling back to detailed_commit patch.\")\n+                                    else:\n+                                        logger.debug(f\"Commit {sha} has no parent. Skipping Compare API call.\")\n+\n+                                    # Dự phòng: Nếu Compare API không thành công hoặc không có diff, sử dụng patch từ detailed_commit\n+                                    if not full_diff_content and detailed_commit and detailed_commit.get(\"files\"):\n+                                        patch_content_lines = []\n+                                        for file_diff in detailed_commit[\"files\"]:\n+                                            if file_diff.get(\"patch\"):\n+                                                patch_content_lines.append(file_diff[\"patch\"])\n+                                        full_diff_content = \"\\n\".join(patch_content_lines)\n+                                        logger.debug(f\"Used fallback patch content from detailed_commit for {sha}. Length: {len(full_diff_content) if full_diff_content else 0}\")\n+                                        logger.debug(f\"Detailed commit files for fallback: {[(f.get('filename'), len(f.get('patch', ''))) for f in detailed_commit.get('files', [])]}\")\n+                                    elif not full_diff_content:\n+                                        logger.debug(f\"No diff content available for {sha} after all attempts.\")\n+\n+                                    if full_diff_content:\n+                                        # Lọc bỏ các dòng tiêu đề Git không mong muốn (diff --git, index, ---, +++)\n+                                        filtered_diff_lines = []\n+                                        for line in full_diff_content.splitlines():\n+                                            if not (line.startswith(\"diff --git\") or \\\n+                                                    line.startswith(\"index \") or \\\n+                                                    line.startswith(\"--- a/\") or \\\n+                                                    line.startswith(\"+++ b/\")):\n+                                                filtered_diff_lines.append(line)\n+                                        commit[\"diff_content\"] = \"\\n\".join(filtered_diff_lines)\n+                                    else:\n+                                        commit[\"diff_content\"] = \"\"\n                                 \n                         except Exception as e:\n                             logger.warning(f\"Could not fetch details for commit {sha}: {e}\")\n@@ -1133,7 +1212,8 @@ async def analyze_single_commit(\n                     \"modified_files\": commit.modified_files,\n                     \"file_types\": commit.file_types,\n                     \"modified_directories\": commit.modified_directories\n-                }\n+                },\n+                \"diff_content\": commit.diff_content\n             },\n             \"analysis\": {\n                 \"pattern_analysis\": pattern_analysis,\n@@ -1394,37 +1474,20 @@ async def compare_commits_github(\n     repo: str,\n     base: str,\n     head: str,\n-    request: Request = None\n+    token: str = Depends(security)\n ):\n     \"\"\"\n     Compare two commits using GitHub API to get detailed change information\n     \"\"\"\n     try:\n         from services.github_service import get_commit_comparison\n-        \n-        # Get user token\n-        token = None\n-        if hasattr(request, 'headers'):\n-            auth_header = request.headers.get(\"Authorization\", \"\")\n-            if auth_header.startswith((\"Bearer \", \"token \")):\n-                token = auth_header.split(\" \", 1)[1]\n-        \n-        # Get comparison data\n-        comparison = await get_commit_comparison(owner, repo, base, head, token)\n-        \n-        if not comparison:\n-            raise HTTPException(status_code=404, detail=\"Comparison not found\")\n-        \n-        return {\n-            \"success\": True,\n-            \"repository\": f\"{owner}/{repo}\",\n-            \"comparison\": {\n-                \"base\": base,\n-                \"head\": head,\n-                **comparison\n-            }\n-        }\n-        \n+        comparison_data = await get_commit_comparison(owner, repo, base, head, token)\n+        return comparison_data\n+    except HTTPException as e:\n+        raise e\n     except Exception as e:\n-        logger.error(f\"Error comparing commits {base}...{head}: {e}\")\n+        logger.error(f\"Error comparing commits {base}...{head} for {owner}/{repo}: {e}\")\n         raise HTTPException(status_code=500, detail=f\"Failed to compare commits: {str(e)}\")\n+\n+\n+\n@@ -8,7 +8,9 @@\n from pathlib import Path\n import tempfile\n import httpx\n+import asyncio\n from datetime import datetime\n+from api.routes.commit import fetch_raw_github_content\n \n router = APIRouter(prefix=\"/api/commits\", tags=[\"Commit Analysis\"])\n \n@@ -19,7 +21,8 @@ async def analyze_github_commits(\n     authorization: str = Header(..., alias=\"Authorization\"),\n     per_page: int = 30,\n     since: Optional[str] = None,\n-    until: Optional[str] = None\n+    until: Optional[str] = None,\n+    include_diff: bool = False  # New parameter\n ):\n     \"\"\"\n     Phân tích commit từ repository GitHub\n@@ -31,6 +34,7 @@ async def analyze_github_commits(\n         per_page: Số commit tối đa cần phân tích (1-100)\n         since: Lọc commit từ ngày (YYYY-MM-DDTHH:MM:SSZ)\n         until: Lọc commit đến ngày (YYYY-MM-DDTHH:MM:SSZ)\n+        include_diff: Có bao gồm nội dung diff đầy đủ của mỗi commit hay không (mặc định: False)\n     \n     Returns:\n         {\n@@ -50,6 +54,11 @@ async def analyze_github_commits(\n                 detail=\"per_page must be between 1 and 100\"\n             )\n \n+        # Extract token from Authorization header\n+        token = authorization.replace(\"Bearer \", \"\")\n+        if not token:\n+            raise HTTPException(status_code=401, detail=\"Missing or invalid GitHub token\")\n+\n         # Configure GitHub API request\n         headers = {\n             \"Authorization\": authorization,\n@@ -81,15 +90,31 @@ async def analyze_github_commits(\n             commits_data = response.json()\n \n         # Prepare analysis data\n-        commits_for_analysis = [\n-            {\n-                \"id\": commit[\"sha\"],\n-                \"message\": commit[\"commit\"][\"message\"],\n-                \"date\": commit[\"commit\"][\"committer\"][\"date\"] if commit[\"commit\"][\"committer\"] else None\n-            }\n-            for commit in commits_data\n-            if commit.get(\"sha\") and commit.get(\"commit\", {}).get(\"message\")\n-        ]\n+        commits_for_analysis = []\n+        for commit_data in commits_data:\n+            commit_sha = commit_data.get(\"sha\")\n+            commit_message = commit_data.get(\"commit\", {}).get(\"message\")\n+            commit_date = commit_data.get(\"commit\", {}).get(\"committer\", {}).get(\"date\")\n+\n+            if commit_sha and commit_message:\n+                commit_info = {\n+                    \"id\": commit_sha,\n+                    \"message\": commit_message,\n+                    \"date\": commit_date\n+                }\n+                \n+                if include_diff:\n+                    try:\n+                        # Fetch full diff content for the commit\n+                        diff_url = f\"https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}\"\n+                        full_commit_details = await fetch_raw_github_content(diff_url, token)\n+                        commit_info[\"diff_content\"] = full_commit_details\n+                    except Exception as e:\n+                        # Log error but don't fail the whole request\n+                        print(f\"Warning: Could not fetch diff for commit {commit_sha}: {e}\")\n+                        commit_info[\"diff_content\"] = \"Error fetching diff\"\n+                \n+                commits_for_analysis.append(commit_info)\n \n         # Analyze commits\n         results = {\n@@ -106,12 +131,16 @@ async def analyze_github_commits(\n             if is_critical:\n                 results[\"critical\"] += 1\n             \n-            results[\"details\"].append({\n+            detail_entry = {\n                 \"id\": commit[\"id\"],\n                 \"is_critical\": is_critical,\n                 \"message_preview\": commit['message'][:100] + \"...\" if len(commit['message']) > 100 else commit['message'],\n                 \"date\": commit[\"date\"]\n-            })\n+            }\n+            if include_diff:\n+                detail_entry[\"diff_content\"] = commit.get(\"diff_content\", \"\")\n+            \n+            results[\"details\"].append(detail_entry)\n \n         # Calculate percentage\n         if results[\"total\"] > 0:\n@@ -4,6 +4,6 @@\n \n def setup_logger():\n     logging.basicConfig(\n-        level=logging.INFO,  # Hiện log từ cấp INFO trở lên\n+        level=logging.DEBUG,  # Hiện log từ cấp DEBUG trở lên\n         format=\"%(asctime)s - %(levelname)s - %(message)s\",\n     )\n@@ -1,6 +1,7 @@\n # backend/main.py\n \n from fastapi import FastAPI\n+from fastapi.middleware.cors import CORSMiddleware\n from core.lifespan import lifespan\n from core.config import setup_middlewares\n from core.logger import setup_logger\n@@ -12,6 +13,7 @@\n from api.routes.contributors import router as contributors_router\n from api.routes.member_analysis import router as member_analysis_router\n from api.routes.commit_routes import router as commit_router\n+from api.routes.area_analysis import area_analysis_router # New import\n import sys\n import os\n \n@@ -25,6 +27,8 @@\n \n app = FastAPI(lifespan=lifespan)\n \n+# PI(lifespan=lifespan)\n+\n setup_middlewares(app)\n \n # Include routers trực tiếp\n@@ -36,6 +40,7 @@\n app.include_router(member_analysis_router)  # Already has /api prefix\n app.include_router(repositories_router)  # Already has /api prefix\n app.include_router(commit_router)  # Already has /api prefix\n+app.include_router(area_analysis_router) # New router\n #app.include_router(ai_router, prefix=\"/api/ai\")\n \n @app.get(\"/\")\n@@ -0,0 +1,3 @@\n+{\"repo\": \"renovatebot/renovate\", \"commit_sha\": \"0def3d9d81745e0c95f1f93b3596fddc975a323b\", \"commit_message\": \"build(deps): update dependency chalk to v5 (main) (#36448)\\n\\nCo-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>\", \"author\": \"renovate[bot]\", \"date\": \"2025-06-11T09:02:28Z\", \"files_changed\": \"package.json,pnpm-lock.yaml\", \"files_count\": \"2\", \"lines_added\": \"3\", \"lines_removed\": \"3\", \"total_changes\": \"6\", \"diff_content\": \"@@ -187,7 +187,7 @@\\n     \\\"azure-devops-node-api\\\": \\\"15.1.0\\\",\\n     \\\"bunyan\\\": \\\"1.8.15\\\",\\n     \\\"cacache\\\": \\\"19.0.1\\\",\\n-    \\\"chalk\\\": \\\"4.1.2\\\",\\n+    \\\"chalk\\\": \\\"5.4.1\\\",\\n     \\\"changelog-filename-regex\\\": \\\"2.0.1\\\",\\n     \\\"clean-git-ref\\\": \\\"2.0.1\\\",\\n     \\\"commander\\\": \\\"14.0.0\\\",\\n@@ -135,8 +135,8 @@ importers:\\n         specifier: 19.0.1\\n         version: 19.0.1\\n       chalk:\\n-        specifier: 4.1.2\\n-        version: 4.1.2\\n+        specifier: 5.4.1\\n+        version: 5.4.1\\n       changelog-filename-regex:\\n         specifier: 2.0.1\\n         version: 2.0.1\\n\", \"commit_type\": \"dependencies\", \"language\": \"JSON\", \"dev_area\": \"dependencies\", \"feature_en\": \"Update chalk dependency to v5.\", \"summary_en\": \"This commit updates the chalk dependency from version 4.1.2 to 5.4.1. This is a dependency update.\", \"feature_vi\": \"Cập nhật dependency chalk lên phiên bản v5.\", \"summary_vi\": \"Commit này cập nhật dependency chalk từ phiên bản 4.1.2 lên 5.4.1. Đây là một bản cập nhật dependency.\", \"risk\": \"lowrisk\", \"size_category\": \"small\", \"day_of_week\": \"Wednesday\", \"time_of_day\": \"morning\", \"is_weekend\": false, \"commit_type_normalized\": \"dependencies\"}\n+{\"repo\": \"hasura/graphql-engine\", \"commit_sha\": \"76e5bfa9904c69feeda5fe1ff215157da6a9732f\", \"commit_message\": \"[PQL-232] COUNT DISTINCT for SQL pushdown (#1809)\\n\\n<!-- The PR description should answer 2 important questions: -->\\n\\n### What\\n\\n<!-- What is this PR trying to accomplish (and why, if it's not\\nobvious)? -->\\n\\n<!-- Consider: do we need to add a changelog entry? -->\\n\\n<!-- Does this PR introduce new validation that might break old builds?\\n-->\\n\\n<!-- Consider: do we need to put new checks behind a flag? -->\\n\\n### How\\n\\n<!-- How is it trying to accomplish it (what are the implementation\\nsteps)? -->\\n\\n---------\\n\\nCo-authored-by: Daniel Harvey <danieljamesharvey@gmail.com>\\nV3_GIT_ORIGIN_REV_ID: 1625c883de99258178463c17b98dc02c564980dd\", \"author\": \"Phil Freeman\", \"date\": \"2025-04-02T15:57:45Z\", \"files_changed\": \"v3/crates/custom-connector/src/query/rel.rs,v3/crates/plan-pushdown-types/src/lib.rs,v3/crates/plan-pushdown-types/tests/json_schema/rel.jsonschema\", \"files_count\": \"3\", \"lines_added\": \"7\", \"lines_removed\": \"2\", \"total_changes\": \"9\", \"diff_content\": \"@@ -632,11 +632,11 @@ fn convert_expression_to_logical_expr(\\n         Expression::Average { expr: _ } => unimplemented!(),\\n         Expression::BoolAnd { expr: _ } => unimplemented!(),\\n         Expression::BoolOr { expr: _ } => unimplemented!(),\\n-        Expression::Count { expr } => Ok(datafusion::prelude::Expr::AggregateFunction(\\n+        Expression::Count { expr, distinct } => Ok(datafusion::prelude::Expr::AggregateFunction(\\n             datafusion::logical_expr::expr::AggregateFunction {\\n                 func: Arc::new(AggregateUDF::from(Count::new())),\\n                 args: vec![convert_expression_to_logical_expr(expr, schema)?],\\n-                distinct: false,\\n+                distinct: *distinct,\\n                 filter: None,\\n                 order_by: None,\\n                 null_treatment: None,\\n@@ -667,6 +667,7 @@ pub enum Expression {\\n     },\\n     Count {\\n         expr: Box<Expression>,\\n+        distinct: bool,\\n     },\\n     FirstValue {\\n         expr: Box<Expression>,\\n@@ -2044,6 +2044,7 @@\\n         {\\n           \\\"type\\\": \\\"object\\\",\\n           \\\"required\\\": [\\n+            \\\"distinct\\\",\\n             \\\"expr\\\",\\n             \\\"type\\\"\\n           ],\\n@@ -2056,6 +2057,9 @@\\n             },\\n             \\\"expr\\\": {\\n               \\\"$ref\\\": \\\"#/definitions/Expression\\\"\\n+            },\\n+            \\\"distinct\\\": {\\n+              \\\"type\\\": \\\"boolean\\\"\\n             }\\n           }\\n         },\\n\", \"commit_type\": \"feature\", \"language\": \"Rust\", \"dev_area\": \"backend\", \"feature_en\": \"Implements COUNT DISTINCT for SQL pushdown.\", \"summary_en\": \"Adds support for COUNT DISTINCT aggregate function in SQL pushdown. This includes modifying the expression conversion logic and updating the JSON schema for rel nodes to include the 'distinct' flag in the Count expression.\", \"feature_vi\": \"Triển khai COUNT DISTINCT cho SQL pushdown.\", \"summary_vi\": \"Thêm hỗ trợ cho hàm tổng hợp COUNT DISTINCT trong SQL pushdown. Điều này bao gồm sửa đổi logic chuyển đổi biểu thức và cập nhật lược đồ JSON cho các nút rel để bao gồm cờ 'distinct' trong biểu thức Count.\", \"risk\": \"highrisk\", \"size_category\": \"small\", \"day_of_week\": \"Wednesday\", \"time_of_day\": \"afternoon\", \"is_weekend\": false, \"commit_type_normalized\": \"feature\"}\n+{\"repo\": \"lerna/lerna\", \"commit_sha\": \"e98685507e7c446b09ffc0e380e06045a841907e\", \"commit_message\": \"chore(deps): bump semver from 5.7.1 to 5.7.2 in /website (#3769)\", \"author\": \"dependabot[bot]\", \"date\": \"2023-07-14T08:12:27Z\", \"files_changed\": \"website/package-lock.json\", \"files_count\": \"1\", \"lines_added\": \"103\", \"lines_removed\": \"129\", \"total_changes\": \"232\", \"diff_content\": \"@@ -231,9 +231,9 @@\\n       }\\n     },\\n     \\\"node_modules/@babel/core/node_modules/semver\\\": {\\n-      \\\"version\\\": \\\"6.3.0\\\",\\n-      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.0.tgz\\\",\\n-      \\\"integrity\\\": \\\"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\\\",\\n+      \\\"version\\\": \\\"6.3.1\\\",\\n+      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\\\",\\n+      \\\"integrity\\\": \\\"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\\\",\\n       \\\"bin\\\": {\\n         \\\"semver\\\": \\\"bin/semver.js\\\"\\n       }\\n@@ -305,9 +305,9 @@\\n       }\\n     },\\n     \\\"node_modules/@babel/helper-compilation-targets/node_modules/semver\\\": {\\n-      \\\"version\\\": \\\"6.3.0\\\",\\n-      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.0.tgz\\\",\\n-      \\\"integrity\\\": \\\"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\\\",\\n+      \\\"version\\\": \\\"6.3.1\\\",\\n+      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\\\",\\n+      \\\"integrity\\\": \\\"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\\\",\\n       \\\"bin\\\": {\\n         \\\"semver\\\": \\\"bin/semver.js\\\"\\n       }\\n@@ -364,9 +364,9 @@\\n       }\\n     },\\n     \\\"node_modules/@babel/helper-define-polyfill-provider/node_modules/semver\\\": {\\n-      \\\"version\\\": \\\"6.3.0\\\",\\n-      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.0.tgz\\\",\\n-      \\\"integrity\\\": \\\"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\\\",\\n+      \\\"version\\\": \\\"6.3.1\\\",\\n+      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\\\",\\n+      \\\"integrity\\\": \\\"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\\\",\\n       \\\"bin\\\": {\\n         \\\"semver\\\": \\\"bin/semver.js\\\"\\n       }\\n@@ -1614,9 +1614,9 @@\\n       }\\n     },\\n     \\\"node_modules/@babel/plugin-transform-runtime/node_modules/semver\\\": {\\n-      \\\"version\\\": \\\"6.3.0\\\",\\n-      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.0.tgz\\\",\\n-      \\\"integrity\\\": \\\"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\\\",\\n+      \\\"version\\\": \\\"6.3.1\\\",\\n+      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\\\",\\n+      \\\"integrity\\\": \\\"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\\\",\\n       \\\"bin\\\": {\\n         \\\"semver\\\": \\\"bin/semver.js\\\"\\n       }\\n@@ -1826,9 +1826,9 @@\\n       }\\n     },\\n     \\\"node_modules/@babel/preset-env/node_modules/semver\\\": {\\n-      \\\"version\\\": \\\"6.3.0\\\",\\n-      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.0.tgz\\\",\\n-      \\\"integrity\\\": \\\"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\\\",\\n+      \\\"version\\\": \\\"6.3.1\\\",\\n+      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\\\",\\n+      \\\"integrity\\\": \\\"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\\\",\\n       \\\"bin\\\": {\\n         \\\"semver\\\": \\\"bin/semver.js\\\"\\n       }\\n@@ -2734,9 +2734,9 @@\\n       }\\n     },\\n     \\\"node_modules/@mdx-js/mdx/node_modules/semver\\\": {\\n-      \\\"version\\\": \\\"5.7.1\\\",\\n-      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-5.7.1.tgz\\\",\\n-      \\\"integrity\\\": \\\"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\\\",\\n+      \\\"version\\\": \\\"5.7.2\\\",\\n+      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-5.7.2.tgz\\\",\\n+      \\\"integrity\\\": \\\"sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==\\\",\\n       \\\"bin\\\": {\\n         \\\"semver\\\": \\\"bin/semver\\\"\\n       }\\n@@ -3911,9 +3911,9 @@\\n       }\\n     },\\n     \\\"node_modules/babel-plugin-polyfill-corejs2/node_modules/semver\\\": {\\n-      \\\"version\\\": \\\"6.3.0\\\",\\n-      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.0.tgz\\\",\\n-      \\\"integrity\\\": \\\"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\\\",\\n+      \\\"version\\\": \\\"6.3.1\\\",\\n+      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\\\",\\n+      \\\"integrity\\\": \\\"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\\\",\\n       \\\"bin\\\": {\\n         \\\"semver\\\": \\\"bin/semver.js\\\"\\n       }\\n@@ -7623,9 +7623,9 @@\\n       }\\n     },\\n     \\\"node_modules/make-dir/node_modules/semver\\\": {\\n-      \\\"version\\\": \\\"6.3.0\\\",\\n-      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.0.tgz\\\",\\n-      \\\"integrity\\\": \\\"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\\\",\\n+      \\\"version\\\": \\\"6.3.1\\\",\\n+      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\\\",\\n+      \\\"integrity\\\": \\\"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\\\",\\n       \\\"bin\\\": {\\n         \\\"semver\\\": \\\"bin/semver.js\\\"\\n       }\\n@@ -8250,9 +8250,9 @@\\n       }\\n     },\\n     \\\"node_modules/package-json/node_modules/semver\\\": {\\n-      \\\"version\\\": \\\"6.3.0\\\",\\n-      \\\"resolved\\\": \\\"https://r\", \"commit_type\": \"dependencies\", \"language\": \"JSON\", \"dev_area\": \"dependencies\", \"feature_en\": \"Bump semver dependency in /website\", \"summary_en\": \"Updates the semver dependency from version 5.7.1 to 5.7.2 in the /website directory. This involves changes to the package-lock.json file to reflect the updated version and integrity hash for semver and its sub-dependencies.\", \"feature_vi\": \"Nâng cấp dependency semver trong /website\", \"summary_vi\": \"Cập nhật dependency semver từ phiên bản 5.7.1 lên 5.7.2 trong thư mục /website. Điều này bao gồm các thay đổi đối với tệp package-lock.json để phản ánh phiên bản và mã băm toàn vẹn đã được cập nhật cho semver và các dependency con của nó.\", \"risk\": \"lowrisk\", \"size_category\": \"large\", \"day_of_week\": \"Friday\", \"time_of_day\": \"morning\", \"is_weekend\": false, \"commit_type_normalized\": \"dependencies\"}\n@@ -61,3 +61,12 @@ class CommitAnalysis(BaseModel):\n     commit: CommitOut\n     analysis: Dict[str, Any]\n     recommendations: List[str]\n+\n+\n+class CommitAreaAnalysisRequest(BaseModel):\n+    commit_message: str\n+    diff_content: str\n+    files_count: int\n+    lines_added: int\n+    lines_removed: int\n+    total_changes: int\n@@ -0,0 +1,145 @@\n+import torch\n+import torch.nn as nn\n+from transformers import DistilBertTokenizer, DistilBertModel\n+import json\n+from sklearn.preprocessing import StandardScaler, LabelEncoder\n+import os\n+from typing import Dict, Any, List\n+\n+# Assuming the model is saved in this path relative to the backend directory\n+MODEL_PATH = os.path.join(os.path.dirname(__file__), '..', 'ai', 'models', 'multifusion', 'areaAnalyst', 'best_area_classifier.pt')\n+# Assuming training data for LabelEncoder and StandardScaler is available\n+TRAIN_DATA_PATH = os.path.join(os.path.dirname(__file__), '..','ai', 'models', 'multifusion', 'areaAnalyst', 'train.jsonl')\n+\n+class MultiFusionAreaModel(nn.Module):\n+    def __init__(self, bert_name='distilbert-base-uncased', num_num_features=4, hidden_size=128, num_classes=5):\n+        super().__init__()\n+        self.bert = DistilBertModel.from_pretrained(bert_name)\n+        self.mlp = nn.Sequential(\n+            nn.Linear(num_num_features, hidden_size),\n+            nn.ReLU(),\n+            nn.Dropout(0.2),\n+            nn.Linear(hidden_size, hidden_size),\n+            nn.ReLU()\n+        )\n+        self.classifier = nn.Linear(self.bert.config.hidden_size + hidden_size, num_classes)\n+\n+    def forward(self, input_ids, attention_mask, num_feat):\n+        bert_out = self.bert(input_ids=input_ids, attention_mask=attention_mask)\n+        bert_feat = bert_out.last_hidden_state[:, 0]\n+        mlp_feat = self.mlp(num_feat)\n+        fusion = torch.cat([bert_feat, mlp_feat], dim=1)\n+        logits = self.classifier(fusion)\n+        return logits\n+\n+class AreaAnalysisService:\n+    _instance = None\n+\n+    def __new__(cls):\n+        if cls._instance is None:\n+            cls._instance = super(AreaAnalysisService, cls).__new__(cls)\n+            cls._instance._initialize()\n+        return cls._instance\n+\n+    def _initialize(self):\n+        self.tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')\n+        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n+\n+        # --- Placeholder for LabelEncoder and StandardScaler ---\n+        # In a real scenario, these should be saved during training and loaded here.\n+        # For demonstration, we'll re-fit them using sample data.\n+        # This is NOT robust for production if the training data changes or is not available.\n+        self.label_encoder = LabelEncoder()\n+        self.scaler = StandardScaler()\n+        self._fit_encoders_from_sample_data()\n+        # --- End Placeholder ---\n+\n+        # Determine num_classes from label_encoder after fitting\n+        num_classes = len(self.label_encoder.classes_)\n+        self.model = MultiFusionAreaModel(num_classes=num_classes).to(self.device)\n+        \n+        if os.path.exists(MODEL_PATH):\n+            self.model.load_state_dict(torch.load(MODEL_PATH, map_location=self.device))\n+            self.model.eval()\n+            print(f\"AreaAnalysisService: Model loaded from {MODEL_PATH}\")\n+        else:\n+            print(f\"AreaAnalysisService: Model not found at {MODEL_PATH}. Please train the model first.\")\n+            # Optionally, raise an error or handle gracefully\n+            self.model = None # Indicate that model is not loaded\n+\n+    def _fit_encoders_from_sample_data(self):\n+        # This is a temporary solution for demonstration.\n+        # In production, LabelEncoder and StandardScaler should be saved/loaded.\n+        areas = []\n+        num_features_data = []\n+        try:\n+            with open(TRAIN_DATA_PATH, 'r', encoding='utf-8') as f:\n+                for line in f:\n+                    try:\n+                        item = json.loads(line)\n+                        if 'dev_area' in item:\n+                            areas.append(item['dev_area'])\n+                        num_features_data.append([\n+                            int(item.get('files_count', 0)),\n+                            int(item.get('lines_added', 0)),\n+                            int(item.get('lines_removed', 0)),\n+                            int(item.get('total_changes', 0))\n+                        ])\n+                    except json.JSONDecodeError:\n+                        print(f\"Warning: Could not decode JSON line in {TRAIN_DATA_PATH}: {line.strip()}\")\n+            \n+            if areas:\n+                self.label_encoder.fit(areas)\n+                print(f\"AreaAnalysisService: LabelEncoder fitted with classes: {self.label_encoder.classes_}\")\n+            else:\n+                print(f\"AreaAnalysisService: No 'dev_area' found in {TRAIN_DATA_PATH} to fit LabelEncoder.\")\n+                # Fallback for label encoder if no data\n+                self.label_encoder.fit(['unknown']) # Default class\n+\n+            if num_features_data:\n+                self.scaler.fit(num_features_data)\n+                print(f\"AreaAnalysisService: StandardScaler fitted.\")\n+            else:\n+                print(f\"AreaAnalysisService: No numerical features found in {TRAIN_DATA_PATH} to fit StandardScaler.\")\n+                # Fallback for scaler if no data\n+                self.scaler.mean_ = [0.0, 0.0, 0.0, 0.0]\n+                self.scaler.scale_ = [1.0, 1.0, 1.0, 1.0]\n+\n+        except FileNotFoundError:\n+            print(f\"AreaAnalysisService: Training data not found at {TRAIN_DATA_PATH}. Cannot fit encoders.\")\n+            # Fallback for label encoder and scaler if file not found\n+            self.label_encoder.fit(['unknown'])\n+            self.scaler.mean_ = [0.0, 0.0, 0.0, 0.0]\n+            self.scaler.scale_ = [1.0, 1.0, 1.0, 1.0]\n+        except Exception as e:\n+            print(f\"AreaAnalysisService: Error fitting encoders: {e}\")\n+            self.label_encoder.fit(['unknown'])\n+            self.scaler.mean_ = [0.0, 0.0, 0.0, 0.0]\n+            self.scaler.scale_ = [1.0, 1.0, 1.0, 1.0]\n+\n+\n+    def predict_area(self, commit_data: Dict[str, Any]) -> str:\n+        if self.model is None:\n+            return \"Model not loaded\" # Or raise an error\n+\n+        text = (commit_data.get('commit_message', '') + ' ' + commit_data.get('diff_content', ''))[:512]\n+        inputs = self.tokenizer(text, truncation=True, padding='max_length', max_length=128, return_tensors='pt')\n+\n+        num_feat = [\n+            int(commit_data.get('files_count', 0)),\n+            int(commit_data.get('lines_added', 0)),\n+            int(commit_data.get('lines_removed', 0)),\n+            int(commit_data.get('total_changes', 0))\n+        ]\n+        num_feat = self.scaler.transform([num_feat])[0]\n+\n+        input_ids = inputs['input_ids'].squeeze(0).to(self.device)\n+        attention_mask = inputs['attention_mask'].squeeze(0).to(self.device)\n+        num_feat_tensor = torch.tensor(num_feat, dtype=torch.float32).unsqueeze(0).to(self.device)\n+\n+        with torch.no_grad():\n+            logits = self.model(input_ids.unsqueeze(0), attention_mask.unsqueeze(0), num_feat_tensor)\n+            predicted_label_idx = torch.argmax(logits, dim=1).item()\n+            predicted_area = self.label_encoder.inverse_transform([predicted_label_idx])[0]\n+        \n+        return predicted_area\n@@ -232,6 +232,7 @@ async def save_multiple_commits(commits_data: list, repo_id: int, branch_name: s\n             \"change_type\": change_type,\n             \"commit_size\": commit_size,\n             \"last_synced\": datetime.utcnow(),\n+            \"diff_content\": commit_data.get(\"diff_content\"),\n             # User IDs và permissions sẽ được resolve sau nếu có user service\n         }\n         \n@@ -189,7 +189,7 @@ const BranchSelector = ({ owner, repo, onBranchChange }) => {\n     setSyncLoading(true);\n     try {\n       const response = await axios.post(\n-        `http://localhost:8000/api/github/${owner}/${repo}/branches/${selectedBranch}/sync-commits?include_stats=true&per_page=100&max_pages=5`,\n+        `http://localhost:8000/api/github/${owner}/${repo}/branches/${selectedBranch}/sync-commits?include_stats=true&per_page=100&max_pages=5&include_diff=true`,\n         {},\n         {\n           headers: {\n@@ -1,340 +0,0 @@\n-import { useEffect, useState, useCallback } from \"react\";\n-import { Select, Spin, message, Tag, Typography, Button, Space, Tooltip } from \"antd\";\n-import { GithubOutlined, BranchesOutlined, SyncOutlined, DatabaseOutlined } from '@ant-design/icons';\n-import axios from \"axios\";\n-import styled from \"styled-components\";\n-\n-const { Option } = Select;\n-const { Text } = Typography;\n-\n-const SelectContainer = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 10px;\n-  padding: 8px 12px;\n-  background: #f8f9fa;\n-  border-radius: 8px;\n-  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n-  flex-wrap: wrap;\n-\n-  @media (max-width: 768px) {\n-    flex-direction: column;\n-    align-items: stretch;\n-    gap: 8px;\n-  }\n-`;\n-\n-const BranchControls = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 8px;\n-  flex: 1;\n-\n-  @media (max-width: 768px) {\n-    flex-direction: column;\n-    align-items: stretch;\n-  }\n-`;\n-\n-const SyncControls = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 6px;\n-`;\n-\n-const SyncButton = styled(Button)`\n-  display: flex;\n-  align-items: center;\n-  gap: 4px;\n-  height: 32px;\n-  padding: 0 12px;\n-  \n-  &.ant-btn-primary {\n-    background: linear-gradient(135deg, #1890ff 0%, #096dd9 100%);\n-    border: none;\n-    \n-    &:hover {\n-      background: linear-gradient(135deg, #40a9ff 0%, #1890ff 100%);\n-      transform: translateY(-1px);\n-    }\n-  }\n-  \n-  &.ant-btn-default {\n-    border-color: #52c41a;\n-    color: #52c41a;\n-    \n-    &:hover {\n-      border-color: #73d13d;\n-      color: #73d13d;\n-      background: #f6ffed;\n-    }\n-  }\n-`;\n-\n-const StyledSelect = styled(Select)`\n-  min-width: 240px;\n-  \n-  .ant-select-selector {\n-    border-radius: 6px !important;\n-    border: 1px solid #d9d9d9 !important;\n-    transition: all 0.3s !important;\n-    \n-    &:hover {\n-      border-color: #1890ff !important;\n-    }\n-  }\n-  \n-  .ant-select-selection-item {\n-    font-weight: 500;\n-  }\n-`;\n-\n-const BranchTag = styled(Tag)`\n-  display: flex;\n-  align-items: center;\n-  gap: 6px;\n-  padding: 4px 8px;\n-  border-radius: 6px;\n-  background: #f0f5ff;\n-  color: #1890ff;\n-  border: 1px solid #d6e4ff;\n-`;\n-\n-const BranchSelector = ({ owner, repo, onBranchChange }) => {\n-  const [branches, setBranches] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const [selectedBranch, setSelectedBranch] = useState(null);\n-  const [syncLoading, setSyncLoading] = useState(false);\n-  const [commitStats, setCommitStats] = useState(null);\n-\n-  // Define fetchCommitStats first using useCallback\n-  const fetchCommitStats = useCallback(async (branchName) => {\n-    const token = localStorage.getItem(\"access_token\");\n-    if (!token) return;\n-\n-    try {\n-      const response = await axios.get(\n-        `http://localhost:8000/api/commits/${owner}/${repo}/branches/${branchName}/commits?limit=1`,\n-        {\n-          headers: {\n-            Authorization: `token ${token}`,\n-          },\n-        }\n-      );\n-      setCommitStats({\n-        totalCommits: response.data.total_found || 0,\n-        lastSync: new Date().toLocaleString()\n-      });\n-    } catch (err) {\n-      console.error(\"Error fetching commit stats:\", err);\n-    }\n-  }, [owner, repo]);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem(\"access_token\");\n-    if (!token) return;\n-\n-    const fetchBranches = async () => {\n-      try {\n-        const response = await axios.get(\n-          `http://localhost:8000/api/github/${owner}/${repo}/branches`,\n-          {\n-            headers: {\n-              Authorization: `token ${token}`,\n-            },\n-          }\n-        );\n-        setBranches(response.data);\n-        if (response.data.length > 0) {\n-          setSelectedBranch(response.data[0].name);\n-          onBranchChange(response.data[0].name);\n-          // Fetch commit stats for default branch\n-          fetchCommitStats(response.data[0].name);\n-        }\n-      } catch (err) {\n-        console.error(err);\n-        message.error(\"Không lấy được danh sách branch\");\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchBranches();\n-  }, [owner, repo, onBranchChange, fetchCommitStats]);\n-\n-  const handleBranchChange = (value) => {\n-    setSelectedBranch(value);\n-    onBranchChange(value);\n-    fetchCommitStats(value);\n-  };\n-\n-  const syncCommitsForBranch = async () => {\n-    if (!selectedBranch) {\n-      message.warning(\"Vui lòng chọn branch trước!\");\n-      return;\n-    }\n-\n-    const token = localStorage.getItem(\"access_token\");\n-    if (!token) {\n-      message.error(\"Vui lòng đăng nhập lại!\");\n-      return;\n-    }\n-\n-    setSyncLoading(true);\n-    try {\n-      const response = await axios.post(\n-        `http://localhost:8000/api/github/${owner}/${repo}/branches/${selectedBranch}/sync-commits?include_stats=true&per_page=100&max_pages=5`,\n-        {},\n-        {\n-          headers: {\n-            Authorization: `token ${token}`,\n-          },\n-        }\n-      );\n-      \n-      const { stats } = response.data;\n-      message.success(\n-        `Đồng bộ thành công! ${stats.new_commits_saved} commits mới được lưu cho branch \"${selectedBranch}\"`\n-      );\n-      \n-      // Update commit stats\n-      setCommitStats({\n-        totalCommits: stats.total_commits_in_database,\n-        newCommits: stats.new_commits_saved,\n-        lastSync: new Date().toLocaleString()\n-      });\n-      \n-      // Auto refresh commit stats after sync\n-      setTimeout(() => {\n-        fetchCommitStats(selectedBranch);\n-      }, 1000);\n-      \n-    } catch (error) {\n-      console.error(\"Lỗi khi đồng bộ commits:\", error);\n-      const errorMessage = error.response?.data?.detail || \"Không thể đồng bộ commits!\";\n-      message.error(errorMessage);\n-    } finally {\n-      setSyncLoading(false);\n-    }\n-  };\n-\n-  const viewCommitsInDB = async () => {\n-    if (!selectedBranch) {\n-      message.warning(\"Vui lòng chọn branch trước!\");\n-      return;\n-    }\n-\n-    const token = localStorage.getItem(\"access_token\");\n-    if (!token) {\n-      message.error(\"Vui lòng đăng nhập lại!\");\n-      return;\n-    }\n-\n-    try {\n-      const response = await axios.get(\n-        `http://localhost:8000/api/commits/${owner}/${repo}/branches/${selectedBranch}/commits?limit=10`,\n-        {\n-          headers: {\n-            Authorization: `token ${token}`,\n-          },\n-        }\n-      );\n-      \n-      const { commits, count } = response.data;\n-      if (count > 0) {\n-        message.success(`Tìm thấy ${count} commits trong database cho branch \"${selectedBranch}\"`);\n-        console.log(\"Commits in database:\", commits);\n-        \n-        // Trigger parent refresh if callback available\n-        if (onBranchChange) {\n-          onBranchChange(selectedBranch, { refresh: true });\n-        }\n-      } else {\n-        message.info(`Chưa có commits nào trong database cho branch \"${selectedBranch}\". Hãy đồng bộ trước!`);\n-      }\n-      \n-    } catch (error) {\n-      console.error(\"Lỗi khi xem commits:\", error);\n-      message.error(\"Không thể lấy danh sách commits!\");\n-    }\n-  };\n-\n-  if (loading) return <Spin size=\"small\" />;\n-\n-  return (\n-    <div style={{ marginBottom: 16 }}>\n-      <SelectContainer>\n-        <BranchControls>\n-          <BranchTag>\n-            <BranchesOutlined />\n-            <Text strong>Branch:</Text>\n-          </BranchTag>\n-          \n-          <StyledSelect\n-            value={selectedBranch}\n-            onChange={handleBranchChange}\n-            suffixIcon={<GithubOutlined style={{ color: '#1890ff' }} />}\n-            dropdownMatchSelectWidth={false}\n-          >\n-            {branches.map((branch) => (\n-              <Option key={branch.name} value={branch.name}>\n-                <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n-                  <BranchesOutlined style={{ color: '#52c41a' }} />\n-                  <Text strong>{branch.name}</Text>\n-                </div>\n-              </Option>\n-            ))}\n-          </StyledSelect>\n-        </BranchControls>\n-        \n-        <SyncControls>\n-          <Tooltip title=\"Đồng bộ commits từ GitHub cho branch này\">\n-            <SyncButton\n-              type=\"primary\"\n-              size=\"small\"\n-              loading={syncLoading}\n-              onClick={syncCommitsForBranch}\n-              disabled={!selectedBranch}\n-            >\n-              <SyncOutlined />\n-              Sync\n-            </SyncButton>\n-          </Tooltip>\n-          \n-          <Tooltip title=\"Xem commits đã lưu trong database\">\n-            <SyncButton\n-              type=\"default\"\n-              size=\"small\"\n-              onClick={viewCommitsInDB}\n-              disabled={!selectedBranch}\n-            >\n-              <DatabaseOutlined />\n-              View DB\n-            </SyncButton>\n-          </Tooltip>\n-        </SyncControls>\n-      </SelectContainer>\n-      \n-      {commitStats && (\n-        <div style={{ \n-          marginTop: 8, \n-          padding: '6px 12px', \n-          background: '#f0f5ff', \n-          borderRadius: '6px',\n-          fontSize: '12px',\n-          color: '#1890ff'\n-        }}>\n-          <Space split={<span style={{ color: '#d9d9d9' }}>|</span>}>\n-            <span>📊 {commitStats.totalCommits} commits</span>\n-            {commitStats.newCommits && (\n-              <span>✨ {commitStats.newCommits} mới</span>\n-            )}\n-            <span>🕒 {commitStats.lastSync}</span>\n-          </Space>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default BranchSelector;\n@@ -1,6 +1,6 @@\n import { useState } from 'react';\n-import { Button, Badge, Popover, List, Typography, Divider, Spin, Tag, Alert, Tooltip } from 'antd';\n-import { ExclamationCircleFilled, CheckCircleFilled, InfoCircleOutlined } from '@ant-design/icons';\n+import { Button, Badge, Popover, List, Typography, Divider, Spin, Tag, Alert, Tooltip, Modal } from 'antd';\n+import { ExclamationCircleFilled, CheckCircleFilled, InfoCircleOutlined, FileTextOutlined } from '@ant-design/icons';\n import axios from 'axios';\n \n const { Text, Title } = Typography;\n@@ -10,6 +10,8 @@ const AnalyzeGitHubCommits = ({ repo }) => {\n   const [loading, setLoading] = useState(false);\n   const [error, setError] = useState(null);\n   const [popoverVisible, setPopoverVisible] = useState(false);\n+  const [isModalVisible, setIsModalVisible] = useState(false);\n+  const [currentDiff, setCurrentDiff] = useState('');\n \n   const analyzeCommits = async () => {\n     try {\n@@ -30,6 +32,7 @@ const AnalyzeGitHubCommits = ({ repo }) => {\n           },\n           params: { \n             per_page: 10,\n+            include_diff: true, // Request full diff content\n             // Add cache busting to avoid stale data\n             timestamp: Date.now()\n           },\n@@ -91,6 +94,16 @@ const AnalyzeGitHubCommits = ({ repo }) => {\n       ? <ExclamationCircleFilled /> \n       : <CheckCircleFilled />;\n   };\n+  const handleShowDiff = (diffContent) => {\n+    setCurrentDiff(diffContent);\n+    setIsModalVisible(true);\n+  };\n+\n+  const handleCloseModal = () => {\n+    setIsModalVisible(false);\n+    setCurrentDiff('');\n+  };\n+\n   const renderContent = () => {\n     if (loading) {\n       return (\n@@ -160,6 +173,17 @@ const AnalyzeGitHubCommits = ({ repo }) => {\n                 >\n                   {item.message_preview}\n                 </Text>\n+                {item.diff_content && item.diff_content !== \"Error fetching diff\" && (\n+                  <Button \n+                    type=\"link\" \n+                    size=\"small\" \n+                    icon={<FileTextOutlined />} \n+                    onClick={() => handleShowDiff(item.diff_content)}\n+                    style={{ paddingLeft: 0 }}\n+                  >\n+                    View Diff\n+                  </Button>\n+                )}\n               </div>\n             </List.Item>\n           )}\n@@ -175,49 +199,65 @@ const AnalyzeGitHubCommits = ({ repo }) => {\n   };\n \n   return (\n-    <Popover \n-      content={renderContent()}\n-      title={\n-        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n-          <span>Commit Analysis</span>\n-          {analysis && (\n-            <Badge \n-              count={`${analysis.critical_percentage}%`} \n-              style={{ \n-                backgroundColor: analysis.critical > 0 ? '#f5222d' : '#52c41a'\n-              }} \n-            />\n-          )}\n-        </div>\n-      }\n-      trigger=\"click\"\n-      open={popoverVisible}\n-      onOpenChange={handlePopoverOpen}\n-      overlayStyle={{ width: 350 }}\n-      placement=\"bottomRight\"\n-    >\n-      <Badge \n-        count={analysis?.critical || 0} \n-        color={getStatusColor()}\n-        offset={[-10, 10]}\n+    <>\n+      <Popover \n+        content={renderContent()}\n+        title={\n+          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n+            <span>Commit Analysis</span>\n+            {analysis && (\n+              <Badge \n+                count={`${analysis.critical_percentage}%`} \n+                style={{ \n+                  backgroundColor: analysis.critical > 0 ? '#f5222d' : '#52c41a'\n+                }} \n+              />\n+            )}\n+          </div>\n+        }\n+        trigger=\"click\"\n+        open={popoverVisible}\n+        onOpenChange={handlePopoverOpen}\n+        overlayStyle={{ width: 350 }}\n+        placement=\"bottomRight\"\n       >\n-        <Button \n-          type={error ? 'default' : analysis ? (analysis.critical ? 'danger' : 'success') : 'default'}\n-          icon={getStatusIcon()}\n-          loading={loading}\n-          onClick={(e) => e.stopPropagation()}\n-          style={{ \n-            marginLeft: 'auto',\n-            fontWeight: 500,\n-            borderRadius: 20,\n-            padding: '0 16px',\n-            border: error ? '1px solid #faad14' : undefined\n-          }}\n+        <Badge \n+          count={analysis?.critical || 0} \n+          color={getStatusColor()}\n+          offset={[-10, 10]}\n         >\n-          {getStatusText()}\n-        </Button>\n-      </Badge>\n-    </Popover>\n+          <Button \n+            type={error ? 'default' : analysis ? (analysis.critical ? 'danger' : 'success') : 'default'}\n+            icon={getStatusIcon()}\n+            loading={loading}\n+            onClick={(e) => e.stopPropagation()}\n+            style={{ \n+              marginLeft: 'auto',\n+              fontWeight: 500,\n+              borderRadius: 20,\n+              padding: '0 16px',\n+              border: error ? '1px solid #faad14' : undefined\n+            }}\n+          >\n+            {getStatusText()}\n+          </Button>\n+        </Badge>\n+      </Popover>\n+\n+      <Modal\n+        title=\"Commit Diff\"\n+        open={isModalVisible}\n+        onCancel={handleCloseModal}\n+        footer={null}\n+        width={800}\n+        style={{ top: 20 }}\n+        bodyStyle={{ maxHeight: 'calc(100vh - 200px)', overflowY: 'auto' }}\n+      >\n+        <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>\n+          {currentDiff}\n+        </pre>\n+      </Modal>\n+    </>\n   );\n };\n \n@@ -0,0 +1,85 @@\n+import requests\n+import json\n+import os\n+\n+# --- Configuration ---\n+BASE_URL = \"http://127.0.0.1:8000/api\"\n+OWNER = \"Waito3007\"\n+REPO = \"KLTN04\"\n+BRANCH = \"NghiaDemo\"\n+MAX_COMMITS_TO_SYNC = 5\n+\n+# --- GitHub Token ---\n+github_token = \"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\" \n+\n+if github_token == \"\":\n+    print(\"ERROR: Please replace 'YOUR_GITHUB_TOKEN_HERE' with your actual GitHub API token in the script file.\")\n+    exit()\n+\n+headers = {\n+    \"Authorization\": f\"token {github_token}\",\n+    \"Accept\": \"application/json\"\n+}\n+\n+# --- Step 1: Run sync ---\n+print(f\"Starting commit sync for {OWNER}/{REPO}:{BRANCH} with diffs...\")\n+sync_url = f\"{BASE_URL}/github/{OWNER}/{REPO}/branches/{BRANCH}/sync-commits\"\n+sync_params = {\n+    \"max_pages\": 1,\n+    \"per_page\": MAX_COMMITS_TO_SYNC,\n+    \"include_diff\": True,\n+    \"force_update\": True\n+}\n+\n+try:\n+    sync_response = requests.post(sync_url, headers=headers, params=sync_params, timeout=300)\n+    sync_response.raise_for_status()\n+    sync_result = sync_response.json()\n+    print(\"Sync API call successful.\")\n+    print(json.dumps(sync_result, indent=2))\n+\n+    if sync_result.get(\"stats\", {}).get(\"total_fetched_from_github\", 0) == 0:\n+        print(\"Sync completed but fetched 0 commits. Cannot verify diff content.\")\n+        exit()\n+\n+except requests.exceptions.RequestException as e:\n+    print(f\"Error during sync API call: {e}\")\n+    if e.response:\n+        print(f\"Response body: {e.response.text}\")\n+    exit()\n+\n+# --- Step 2: Verify ---\n+print(f\"\\nVerifying by fetching commits from the database...\")\n+verify_url = f\"{BASE_URL}/commits/{OWNER}/{REPO}/branches/{BRANCH}/commits\"\n+verify_params = {\n+    \"limit\": MAX_COMMITS_TO_SYNC\n+}\n+\n+try:\n+    verify_response = requests.get(verify_url, params=verify_params, timeout=60)\n+    verify_response.raise_for_status()\n+    verify_result = verify_response.json()\n+    \n+    commits = verify_result.get(\"commits\", [])\n+    if not commits:\n+        print(\"Verification failed: No commits were found in the database after sync.\")\n+        exit()\n+\n+    # --- Step 3: Check for diff_content ---\n+    diff_found = False\n+    for commit in commits:\n+        if commit.get(\"diff_content\") and isinstance(commit[\"diff_content\"], str) and len(commit[\"diff_content\"]) > 0:\n+            print(f\"SUCCESS: Found diff_content for commit {commit['sha'][:7]}\")\n+            diff_found = True\n+            break\n+\n+    if diff_found:\n+        print(\"\\nTest Passed: The 'diff_content' field is being correctly synced and saved.\")\n+    else:\n+        print(\"\\nTest Failed: No commits found with populated 'diff_content' after sync.\")\n+\n+except requests.exceptions.RequestException as e:\n+    print(f\"Error during verification API call: {e}\")\n+    if e.response:\n+        print(f\"Response body: {e.response.text}\")\n+    exit()\n\\ No newline at end of file",
  "file_types": "{\".py\": 9, \".jsonl\": 1, \".jsx\": 3}",
  "num_dirs_changed": 7,
  "num_py_files": 18,
  "num_jsonl_files": 2,
  "num_jsx_files": 6,
  "num_build_files": 0,
  "num_test_files": 1,
  "num_doc_files": 0,
  "sha_short": "91c59eb8",
  "date": "2025-07-21T16:13:09",
  "analysis": {
    "type": "feat",
    "confidence": 0.8,
    "ai_powered": true,
    "ai_model": "MultiFusionV2"
  }
}
