/**
 * TaskAssignBoard - Component ch√≠nh cho vi·ªác ph√¢n c√¥ng task
 * Tu√¢n th·ªß quy t·∫Øc KLTN04: T√°ch bi·ªát logic, s·ª≠ d·ª•ng hooks, defensive programming
 */

import React, { useState, useEffect, useMemo } from 'react';
import { Card, Row, Col, Alert, Button, Space, Typography } from 'antd';
import { PlusOutlined, ReloadOutlined } from '@ant-design/icons';
import RepositorySelector from './RepositorySelector';
import KanbanBoard from './KanbanBoard';
import CreateTaskModal from './CreateTaskModal';
import TaskStatsCard from './TaskStatsCard';
import useTaskAssign from "@hooks/useTaskAssign";
import { getTaskStats } from "@utils/taskUtils";
import { Loading } from '@components/common';
import './TaskAssignBoard.css';
import Widget from "@components/common/Widget";

const { Title, Text } = Typography;

const TaskAssignBoard = ({ 
  repositories = [], 
  repoLoading = false,
  selectedRepoId = null,
  onRepoChange = null 
}) => {
  // State management - tu√¢n th·ªß immutability
  const [selectedRepo, setSelectedRepo] = useState(null);
  const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);

  // Custom hooks cho logic nghi·ªáp v·ª•
  const { 
    tasks, 
    loading, 
    error, 
    loadTasks, 
    createTask, 
    updateTask, 
    deleteTask,
    updateTaskStatus 
  } = useTaskAssign(selectedRepo);

  // Computed stats using utility function
  const taskStats = useMemo(() => 
    tasks.length > 0 ? getTaskStats(tasks) : null, 
    [tasks]
  );

  // S·ª≠ d·ª•ng repositories t·ª´ props thay v√¨ hook
  // const { repositories, loading: repoLoading } = useRepositories();

  // Defensive programming: Validate d·ªØ li·ªáu
  const validTasks = useMemo(() => {
    if (!Array.isArray(tasks)) return [];
    return tasks.filter(task => task && typeof task === 'object' && task.id);
  }, [tasks]);

  // ƒê·ªìng b·ªô selectedRepoId t·ª´ props v·ªõi local selectedRepo state
  useEffect(() => {
    if (selectedRepoId && repositories.length > 0) {
      const repo = repositories.find(r => r.id === selectedRepoId);
      if (repo && repo !== selectedRepo) {
        setSelectedRepo(repo);
      }
    }
  }, [selectedRepoId, repositories, selectedRepo]);

  // Effect ƒë·ªÉ fetch tasks - G·ªåI KHI USER CH·ªåN REPOSITORY
  useEffect(() => {
    // Defensive programming: ƒê·∫£m b·∫£o selectedRepo h·ª£p l·ªá
    if (!selectedRepo) {
      console.log('üîç No repository selected, skipping task load');
      return;
    }

    const ownerName = typeof selectedRepo?.owner === 'string' 
      ? selectedRepo.owner 
      : selectedRepo?.owner?.login || selectedRepo?.owner?.name;
    
    console.log('üîç Task loading check:', {
      selectedRepo: selectedRepo?.name,
      owner: ownerName,
      hasValidData: !!(ownerName && selectedRepo?.name)
    });

    if (ownerName && selectedRepo?.name) {
      console.log('‚úÖ Loading tasks for repo:', `${ownerName}/${selectedRepo.name}`);
      loadTasks();
    } else {
      console.log('‚ö†Ô∏è Missing repository data, cannot load tasks');
    }
  }, [selectedRepo, loadTasks]); // B·ªè selectedRepoId dependency ƒë·ªÉ tr√°nh conflict

  // Handlers v·ªõi error handling
  const handleRepositoryChange = (repo) => {
    try {
      console.log('üîÑ TaskAssignBoard: Repository changed:', repo);
      setSelectedRepo(repo);
      
      // G·ªçi callback ƒë·ªÉ th√¥ng b√°o v·ªÅ s·ª± thay ƒë·ªïi repository
      if (onRepoChange) {
        console.log('üì§ TaskAssignBoard: Calling onRepoChange with repo:', repo);
        onRepoChange(repo);
      }
      
      // QUAN TR·ªåNG: Kh√¥ng c·∫ßn ki·ªÉm tra selectedRepoId n·ªØa, v√¨ user ƒë√£ ch·ªçn tr·ª±c ti·∫øp
      // Trigger load tasks ngay l·∫≠p t·ª©c
      if (repo && repo.name) {
        const ownerName = typeof repo.owner === 'string' 
          ? repo.owner 
          : repo.owner?.login || repo.owner?.name;
        
        if (ownerName) {
          console.log('‚úÖ Immediately loading tasks for selected repo:', `${ownerName}/${repo.name}`);
          // loadTasks s·∫Ω ƒë∆∞·ª£c g·ªçi th√¥ng qua useEffect
        }
      }
    } catch (error) {
      console.error('L·ªói khi thay ƒë·ªïi repository:', error);
    }
  };

  const handleCreateTask = async (taskData) => {
    try {
      if (!selectedRepo) {
        throw new Error('Vui l√≤ng ch·ªçn repository tr∆∞·ªõc');
      }

      const newTaskData = {
        ...taskData,
        repo_owner: typeof selectedRepo.owner === 'string' 
          ? selectedRepo.owner 
          : selectedRepo.owner?.login || selectedRepo.owner?.name,
        repo_name: selectedRepo.name
      };

      await createTask(newTaskData);
      setIsCreateModalVisible(false);
      loadTasks(); // Reload tasks sau khi t·∫°o th√†nh c√¥ng
    } catch (error) {
      console.error('L·ªói khi t·∫°o task:', error);
      // Error s·∫Ω ƒë∆∞·ª£c handle b·ªüi useTaskAssign hook
    }
  };

  const handleTaskUpdate = async (taskId, updateData) => {
    try {
      await updateTask(taskId, updateData);
      loadTasks(); // Reload tasks sau khi update
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t task:', error);
    }
  };

  const handleTaskDelete = async (taskId) => {
    try {
      await deleteTask(taskId);
      loadTasks(); // Reload tasks sau khi x√≥a
    } catch (error) {
      console.error('L·ªói khi x√≥a task:', error);
    }
  };

  const handleStatusChange = async (taskId, newStatus) => {
    try {
      await updateTaskStatus(taskId, newStatus);
      loadTasks(); // Reload tasks sau khi thay ƒë·ªïi status
    } catch (error) {
      console.error('L·ªói khi thay ƒë·ªïi status:', error);
    }
  };

  const handleRefresh = () => {
    loadTasks(); // S·ª≠ d·ª•ng loadTasks thay v√¨ setRefreshTrigger
  };

  // Render error state
  if (error) {
    return (
      <Card className="task-assign-board">
        <Alert
          message="L·ªói khi t·∫£i d·ªØ li·ªáu"
          description={error.message || 'C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu task'}
          type="error"
          showIcon
          action={
            <Button size="small" onClick={handleRefresh}>
              Th·ª≠ l·∫°i
            </Button>
          }
        />
      </Card>
    );
  }

  return (
    <div className="task-assign-board">
      {/* Header v·ªõi repository selector */}
      <Card className="task-assign-header" size="small">
        <Row align="middle" justify="space-between">
          <Col xs={24} sm={12} md={8}>
            <Space direction="vertical" size="small" style={{ width: '100%' }}>
              <Text strong>Ch·ªçn Repository:</Text>
              <RepositorySelector
                repositories={repositories}
                loading={repoLoading}
                selectedRepo={selectedRepo}
                onRepositoryChange={handleRepositoryChange}
                placeholder="Ch·ªçn repository ƒë·ªÉ qu·∫£n l√Ω tasks"
              />
            </Space>
          </Col>
          
          <Col xs={24} sm={12} md={8} style={{ textAlign: 'right' }}>
            {selectedRepo && (
              <Space>
                <Button
                  type="primary"
                  icon={<PlusOutlined />}
                  onClick={() => setIsCreateModalVisible(true)}
                  disabled={loading}
                >
                  T·∫°o Task
                </Button>
                <Button
                  icon={<ReloadOutlined />}
                  onClick={handleRefresh}
                  loading={loading}
                >
                  L√†m m·ªõi
                </Button>
              </Space>
            )}
          </Col>
        </Row>
      </Card>

      {/* Task Statistics */}
      {selectedRepo && taskStats && (
        <TaskStatsCard stats={taskStats} loading={loading} />
      )}

      {/* Main Content */}
      {!selectedRepo ? (
        <Card className="task-assign-placeholder">
          <div style={{ textAlign: 'center', padding: '40px 20px' }}>
            <Title level={4} type="secondary">
              Vui l√≤ng ch·ªçn repository ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω tasks
            </Title>
            <Text type="secondary">
              Ch·ªçn m·ªôt repository t·ª´ danh s√°ch tr√™n ƒë·ªÉ xem v√† qu·∫£n l√Ω c√°c tasks ƒë∆∞·ª£c ph√¢n c√¥ng
            </Text>
          </div>
        </Card>
      ) : loading ? (
        <Loading variant="circle" size="large" message="ƒêang t·∫£i tasks..." />
      ) : (
        <KanbanBoard
          tasks={validTasks}
          onTaskUpdate={handleTaskUpdate}
          onTaskDelete={handleTaskDelete}
          onStatusChange={handleStatusChange}
          selectedRepo={selectedRepo}
        />
      )}

      {/* Create Task Modal */}
      <CreateTaskModal
        visible={isCreateModalVisible}
        onCancel={() => setIsCreateModalVisible(false)}
        onSubmit={handleCreateTask}
        selectedRepo={selectedRepo}
        loading={loading}
      />
    </div>
  );
};

export default TaskAssignBoard;
